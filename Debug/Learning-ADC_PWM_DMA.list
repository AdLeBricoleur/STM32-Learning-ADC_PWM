
Learning-ADC_PWM_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006478  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006648  08006648  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006650  08006650  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  08006664  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08006664  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001503e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250c  00000000  00000000  0003507a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00037588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00038828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d13  00000000  00000000  000399f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001465f  00000000  00000000  00061703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101aa9  00000000  00000000  00075d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017780b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005068  00000000  00000000  0017785c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080065e8 	.word	0x080065e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080065e8 	.word	0x080065e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fce6 	bl	8000ea0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f834 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa36 	bl	8000948 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 fa16 	bl	800090c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f9e4 	bl	80008ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e4:	f000 f87e 	bl	80005e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e8:	f000 f8f2 	bl	80006d0 <MX_TIM2_Init>
  MX_TIM16_Init();
 80004ec:	f000 f966 	bl	80007bc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  // Start PWM Timer 16
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80004f0:	2100      	movs	r1, #0
 80004f2:	480e      	ldr	r0, [pc, #56]	; (800052c <main+0x60>)
 80004f4:	f004 fb7c 	bl	8004bf0 <HAL_TIM_PWM_Start>
  // Start PWM Timer 2
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004f8:	2104      	movs	r1, #4
 80004fa:	480d      	ldr	r0, [pc, #52]	; (8000530 <main+0x64>)
 80004fc:	f004 fb78 	bl	8004bf0 <HAL_TIM_PWM_Start>
  // Reset Duty cycle PWM Timer 16
  TIM16->CCR1 = duty_cyle;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <main+0x68>)
 8000502:	881a      	ldrh	r2, [r3, #0]
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <main+0x6c>)
 8000506:	635a      	str	r2, [r3, #52]	; 0x34
  // Reset Duty cycle PWM Timer 2
  TIM2->CCR2 = (uint32_t)duty_cyle;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x68>)
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000510:	639a      	str	r2, [r3, #56]	; 0x38
  // Calibrate the ADC On Power-Up For Better Accuracy
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000512:	217f      	movs	r1, #127	; 0x7f
 8000514:	4809      	ldr	r0, [pc, #36]	; (800053c <main+0x70>)
 8000516:	f002 f985 	bl	8002824 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Start ADC Conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&duty_cyle, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	4905      	ldr	r1, [pc, #20]	; (8000534 <main+0x68>)
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x70>)
 8000520:	f001 f8d0 	bl	80016c4 <HAL_ADC_Start_DMA>
	// Wait one microsecond
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fd37 	bl	8000f98 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&duty_cyle, 1);
 800052a:	e7f6      	b.n	800051a <main+0x4e>
 800052c:	20000120 	.word	0x20000120
 8000530:	200000d4 	.word	0x200000d4
 8000534:	200001f0 	.word	0x200001f0
 8000538:	40014400 	.word	0x40014400
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b096      	sub	sp, #88	; 0x58
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f006 f842 	bl	80065d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000562:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000566:	f002 ff79 	bl	800345c <HAL_PWREx_ControlVoltageScaling>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000570:	f000 fa6a 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000574:	2302      	movs	r3, #2
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800058e:	230a      	movs	r3, #10
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 ffb0 	bl	8003508 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ae:	f000 fa4b 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b6:	2303      	movs	r3, #3
 80005b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2104      	movs	r1, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fb78 	bl	8003cc0 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 fa37 	bl	8000a48 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	; 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000608:	4a2f      	ldr	r2, [pc, #188]	; (80006c8 <MX_ADC1_Init+0xe4>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_ADC1_Init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_ADC1_Init+0xe0>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061e:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000626:	2204      	movs	r2, #4
 8000628:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <MX_ADC1_Init+0xe0>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000632:	2200      	movs	r2, #0
 8000634:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_ADC1_Init+0xe0>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_ADC1_Init+0xe0>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000652:	2201      	movs	r2, #1
 8000654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_ADC1_Init+0xe0>)
 800065a:	2200      	movs	r2, #0
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000666:	4817      	ldr	r0, [pc, #92]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000668:	f000 fed6 	bl	8001418 <HAL_ADC_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000672:	f000 f9e9 	bl	8000a48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <MX_ADC1_Init+0xe0>)
 8000682:	f002 f961 	bl	8002948 <HAL_ADCEx_MultiModeConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800068c:	f000 f9dc 	bl	8000a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_ADC1_Init+0xe8>)
 8000692:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000694:	2306      	movs	r3, #6
 8000696:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069c:	237f      	movs	r3, #127	; 0x7f
 800069e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a0:	2304      	movs	r3, #4
 80006a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_ADC1_Init+0xe0>)
 80006ae:	f001 fafd 	bl	8001cac <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006b8:	f000 f9c6 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3728      	adds	r7, #40	; 0x28
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000028 	.word	0x20000028
 80006c8:	50040000 	.word	0x50040000
 80006cc:	14f00020 	.word	0x14f00020

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	; 0x38
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
 80006fe:	615a      	str	r2, [r3, #20]
 8000700:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000708:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_TIM2_Init+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000716:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000724:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072a:	4823      	ldr	r0, [pc, #140]	; (80007b8 <MX_TIM2_Init+0xe8>)
 800072c:	f004 f9a8 	bl	8004a80 <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000736:	f000 f987 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000744:	4619      	mov	r1, r3
 8000746:	481c      	ldr	r0, [pc, #112]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000748:	f004 fc6c 	bl	8005024 <HAL_TIM_ConfigClockSource>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000752:	f000 f979 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000758:	f004 f9e9 	bl	8004b2e <HAL_TIM_PWM_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000762:	f000 f971 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4810      	ldr	r0, [pc, #64]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000776:	f005 f94f 	bl	8005a18 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000780:	f000 f962 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	2204      	movs	r2, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4807      	ldr	r0, [pc, #28]	; (80007b8 <MX_TIM2_Init+0xe8>)
 800079c:	f004 fb2e 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007a6:	f000 f94f 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MX_TIM2_Init+0xe8>)
 80007ac:	f000 fa48 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000d4 	.word	0x200000d4

080007bc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b092      	sub	sp, #72	; 0x48
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	222c      	movs	r2, #44	; 0x2c
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f005 fefb 	bl	80065d8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <MX_TIM16_Init+0xe8>)
 80007e4:	4a30      	ldr	r2, [pc, #192]	; (80008a8 <MX_TIM16_Init+0xec>)
 80007e6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_TIM16_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_TIM16_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007f4:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_TIM16_Init+0xe8>)
 80007f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_TIM16_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_TIM16_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_TIM16_Init+0xe8>)
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800080e:	4825      	ldr	r0, [pc, #148]	; (80008a4 <MX_TIM16_Init+0xe8>)
 8000810:	f004 f936 	bl	8004a80 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800081a:	f000 f915 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800081e:	4821      	ldr	r0, [pc, #132]	; (80008a4 <MX_TIM16_Init+0xe8>)
 8000820:	f004 f985 	bl	8004b2e <HAL_TIM_PWM_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800082a:	f000 f90d 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <MX_TIM16_Init+0xe8>)
 8000854:	f004 fad2 	bl	8004dfc <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800085e:	f000 f8f3 	bl	8000a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM16_Init+0xe8>)
 8000886:	f005 f94f 	bl	8005b28 <HAL_TIMEx_ConfigBreakDeadTime>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000890:	f000 f8da 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM16_Init+0xe8>)
 8000896:	f000 f9d3 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 800089a:	bf00      	nop
 800089c:	3748      	adds	r7, #72	; 0x48
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000120 	.word	0x20000120
 80008a8:	40014400 	.word	0x40014400

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <MX_USART2_UART_Init+0x5c>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USART2_UART_Init+0x58>)
 80008f0:	f005 f998 	bl	8005c24 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f8a5 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000016c 	.word	0x2000016c
 8000908:	40004400 	.word	0x40004400

0800090c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_DMA_Init+0x38>)
 8000914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <MX_DMA_Init+0x38>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6493      	str	r3, [r2, #72]	; 0x48
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_DMA_Init+0x38>)
 8000920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	200b      	movs	r0, #11
 8000930:	f002 f995 	bl	8002c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000934:	200b      	movs	r0, #11
 8000936:	f002 f9ae 	bl	8002c96 <HAL_NVIC_EnableIRQ>

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <MX_GPIO_Init+0xc4>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <MX_GPIO_Init+0xc4>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0xc4>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_GPIO_Init+0xc4>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a24      	ldr	r2, [pc, #144]	; (8000a0c <MX_GPIO_Init+0xc4>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_GPIO_Init+0xc4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_GPIO_Init+0xc4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <MX_GPIO_Init+0xc4>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_GPIO_Init+0xc4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_GPIO_Init+0xc4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <MX_GPIO_Init+0xc4>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_GPIO_Init+0xc4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2120      	movs	r1, #32
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f002 fd23 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MX_GPIO_Init+0xc8>)
 80009e2:	f002 fb6b 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e6:	2320      	movs	r3, #32
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f002 fb5c 	bl	80030bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000800 	.word	0x48000800

08000a14 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	// Conversion Complete & DMA Transfer Complete As Well
	// So The AD_RES Is Now Updated & Let's Move IT To The PWM CCRx
	// Update The PWM Duty Cycle With Latest ADC Conversion Result
	// Set Duty cycle PWM Timer 16
	TIM16->CCR1 = (duty_cyle<<4);
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	011a      	lsls	r2, r3, #4
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_ADC_ConvCpltCallback+0x30>)
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
	// Set Duty cycle PWM Timer 2
	TIM2->CCR2 = (uint32_t)(duty_cyle<<4);
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	011a      	lsls	r2, r3, #4
 8000a2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a30:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200001f0 	.word	0x200001f0
 8000a44:	40014400 	.word	0x40014400

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	; 0x60
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x44>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0ac      	sub	sp, #176	; 0xb0
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2288      	movs	r2, #136	; 0x88
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f005 fd8b 	bl	80065d8 <memset>
  if(hadc->Instance==ADC1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a41      	ldr	r2, [pc, #260]	; (8000bcc <HAL_ADC_MspInit+0x130>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d17a      	bne.n	8000bc2 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ad2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 fb03 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000b08:	f7ff ff9e 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b0c:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <HAL_ADC_MspInit+0x134>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <HAL_ADC_MspInit+0x134>)
 8000b12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <HAL_ADC_MspInit+0x134>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b2a      	ldr	r3, [pc, #168]	; (8000bd0 <HAL_ADC_MspInit+0x134>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	4a29      	ldr	r2, [pc, #164]	; (8000bd0 <HAL_ADC_MspInit+0x134>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b30:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_ADC_MspInit+0x134>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b42:	230b      	movs	r3, #11
 8000b44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f002 fab0 	bl	80030bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <HAL_ADC_MspInit+0x13c>)
 8000b60:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b96:	480f      	ldr	r0, [pc, #60]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000b98:	f002 f898 	bl	8002ccc <HAL_DMA_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8000ba2:	f7ff ff51 	bl	8000a48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000baa:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bac:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	2012      	movs	r0, #18
 8000bb8:	f002 f851 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bbc:	2012      	movs	r0, #18
 8000bbe:	f002 f86a 	bl	8002c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	37b0      	adds	r7, #176	; 0xb0
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	50040000 	.word	0x50040000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	2000008c 	.word	0x2000008c
 8000bd8:	40020008 	.word	0x40020008

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bec:	d10c      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c06:	e010      	b.n	8000c2a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <HAL_TIM_Base_MspInit+0x60>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10b      	bne.n	8000c2a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_TIM_Base_MspInit+0x5c>)
 8000c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40014400 	.word	0x40014400

08000c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c60:	d11d      	bne.n	8000c9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_TIM_MspPostInit+0xac>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a21      	ldr	r2, [pc, #132]	; (8000cec <HAL_TIM_MspPostInit+0xac>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_TIM_MspPostInit+0xac>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f002 fa10 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000c9c:	e021      	b.n	8000ce2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM16)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <HAL_TIM_MspPostInit+0xb0>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d11c      	bne.n	8000ce2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_TIM_MspPostInit+0xac>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_TIM_MspPostInit+0xac>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_TIM_MspPostInit+0xac>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000cd0:	230e      	movs	r3, #14
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f002 f9ed 	bl	80030bc <HAL_GPIO_Init>
}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40014400 	.word	0x40014400

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ac      	sub	sp, #176	; 0xb0
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2288      	movs	r2, #136	; 0x88
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f005 fc5f 	bl	80065d8 <memset>
  if(huart->Instance==USART2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_UART_MspInit+0xb0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d13b      	bne.n	8000d9c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 f9e9 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d3c:	f7ff fe84 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d70:	230c      	movs	r3, #12
 8000d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f002 f990 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	37b0      	adds	r7, #176	; 0xb0
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 f8ae 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <DMA1_Channel1_IRQHandler+0x10>)
 8000e06:	f002 f879 	bl	8002efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000008c 	.word	0x2000008c

08000e14 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <ADC1_2_IRQHandler+0x10>)
 8000e1a:	f000 fd0f 	bl	800183c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000028 	.word	0x20000028

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <SystemInit+0x20>)
 8000e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <SystemInit+0x20>)
 8000e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e50:	f7ff ffea 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490d      	ldr	r1, [pc, #52]	; (8000e8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0a      	ldr	r4, [pc, #40]	; (8000e98 <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f005 fb89 	bl	8006590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e7e:	f7ff fb25 	bl	80004cc <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e90:	08006658 	.word	0x08006658
  ldr r2, =_sbss
 8000e94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e98:	200001f8 	.word	0x200001f8

08000e9c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC3_IRQHandler>
	...

08000ea0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_Init+0x3c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_Init+0x3c>)
 8000eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f001 fec6 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f80f 	bl	8000ee0 <HAL_InitTick>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	e001      	b.n	8000ed2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ece:	f7ff fdc1 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_InitTick+0x6c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d023      	beq.n	8000f3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_InitTick+0x70>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_InitTick+0x6c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fed1 	bl	8002cb2 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10f      	bne.n	8000f36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d809      	bhi.n	8000f30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f001 fe9b 	bl	8002c5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_InitTick+0x74>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e007      	b.n	8000f40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	e004      	b.n	8000f40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e001      	b.n	8000f40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	200001f4 	.word	0x200001f4

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	200001f4 	.word	0x200001f4

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	609a      	str	r2, [r3, #8]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3360      	adds	r3, #96	; 0x60
 800105a:	461a      	mov	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <LL_ADC_SetOffset+0x44>)
 800106a:	4013      	ands	r3, r2
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	4313      	orrs	r3, r2
 8001078:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001080:	bf00      	nop
 8001082:	371c      	adds	r7, #28
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	03fff000 	.word	0x03fff000

08001090 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3360      	adds	r3, #96	; 0x60
 800109e:	461a      	mov	r2, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3360      	adds	r3, #96	; 0x60
 80010cc:	461a      	mov	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80010e6:	bf00      	nop
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3330      	adds	r3, #48	; 0x30
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	211f      	movs	r1, #31
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	401a      	ands	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0e9b      	lsrs	r3, r3, #26
 8001150:	f003 011f 	and.w	r1, r3, #31
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	431a      	orrs	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001164:	bf00      	nop
 8001166:	371c      	adds	r7, #28
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001196:	b480      	push	{r7}
 8001198:	b087      	sub	sp, #28
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3314      	adds	r3, #20
 80011a6:	461a      	mov	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	0e5b      	lsrs	r3, r3, #25
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	0d1b      	lsrs	r3, r3, #20
 80011be:	f003 031f 	and.w	r3, r3, #31
 80011c2:	2107      	movs	r1, #7
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	401a      	ands	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	0d1b      	lsrs	r3, r3, #20
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001204:	43db      	mvns	r3, r3
 8001206:	401a      	ands	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0318 	and.w	r3, r3, #24
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001210:	40d9      	lsrs	r1, r3
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	400b      	ands	r3, r1
 8001216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800121a:	431a      	orrs	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	0007ffff 	.word	0x0007ffff

08001234 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 031f 	and.w	r3, r3, #31
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800127c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6093      	str	r3, [r2, #8]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012a4:	d101      	bne.n	80012aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012f4:	d101      	bne.n	80012fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001318:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800131c:	f043 0201 	orr.w	r2, r3, #1
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001344:	f043 0202 	orr.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <LL_ADC_IsEnabled+0x18>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <LL_ADC_IsEnabled+0x1a>
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b02      	cmp	r3, #2
 8001390:	d101      	bne.n	8001396 <LL_ADC_IsDisableOngoing+0x18>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <LL_ADC_IsDisableOngoing+0x1a>
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b8:	f043 0204 	orr.w	r2, r3, #4
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d101      	bne.n	80013e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b08      	cmp	r3, #8
 8001404:	d101      	bne.n	800140a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e136      	b.n	80016a0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	2b00      	cmp	r3, #0
 800143e:	d109      	bne.n	8001454 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fb2b 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff19 	bl	8001290 <LL_ADC_IsDeepPowerDownEnabled>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff feff 	bl	800126c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff34 	bl	80012e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff18 	bl	80012b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001488:	4b87      	ldr	r3, [pc, #540]	; (80016a8 <HAL_ADC_Init+0x290>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	4a87      	ldr	r2, [pc, #540]	; (80016ac <HAL_ADC_Init+0x294>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	3301      	adds	r3, #1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800149c:	e002      	b.n	80014a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f9      	bne.n	800149e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff16 	bl	80012e0 <LL_ADC_IsInternalRegulatorEnabled>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10d      	bne.n	80014d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014be:	f043 0210 	orr.w	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff76 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 80014e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80cf 	bne.w	800168e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 80cb 	bne.w	800168e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001500:	f043 0202 	orr.w	r2, r3, #2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff23 	bl	8001358 <LL_ADC_IsEnabled>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d115      	bne.n	8001544 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001518:	4865      	ldr	r0, [pc, #404]	; (80016b0 <HAL_ADC_Init+0x298>)
 800151a:	f7ff ff1d 	bl	8001358 <LL_ADC_IsEnabled>
 800151e:	4604      	mov	r4, r0
 8001520:	4864      	ldr	r0, [pc, #400]	; (80016b4 <HAL_ADC_Init+0x29c>)
 8001522:	f7ff ff19 	bl	8001358 <LL_ADC_IsEnabled>
 8001526:	4603      	mov	r3, r0
 8001528:	431c      	orrs	r4, r3
 800152a:	4863      	ldr	r0, [pc, #396]	; (80016b8 <HAL_ADC_Init+0x2a0>)
 800152c:	f7ff ff14 	bl	8001358 <LL_ADC_IsEnabled>
 8001530:	4603      	mov	r3, r0
 8001532:	4323      	orrs	r3, r4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4619      	mov	r1, r3
 800153e:	485f      	ldr	r0, [pc, #380]	; (80016bc <HAL_ADC_Init+0x2a4>)
 8001540:	f7ff fd4e 	bl	8000fe0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7e5b      	ldrb	r3, [r3, #25]
 8001548:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001554:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800155a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001562:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	3b01      	subs	r3, #1
 8001578:	045b      	lsls	r3, r3, #17
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_ADC_Init+0x2a8>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff09 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 80015ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff16 	bl	80013f2 <LL_ADC_INJ_IsConversionOngoing>
 80015c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d13d      	bne.n	800164a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d13a      	bne.n	800164a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015e0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015f0:	f023 0302 	bic.w	r3, r3, #2
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	69b9      	ldr	r1, [r7, #24]
 80015fa:	430b      	orrs	r3, r1
 80015fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001604:	2b01      	cmp	r3, #1
 8001606:	d118      	bne.n	800163a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800161e:	4311      	orrs	r1, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001624:	4311      	orrs	r1, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800162a:	430a      	orrs	r2, r1
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	611a      	str	r2, [r3, #16]
 8001638:	e007      	b.n	800164a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d10c      	bne.n	800166c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f023 010f 	bic.w	r1, r3, #15
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	631a      	str	r2, [r3, #48]	; 0x30
 800166a:	e007      	b.n	800167c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020f 	bic.w	r2, r2, #15
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	f023 0303 	bic.w	r3, r3, #3
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	655a      	str	r2, [r3, #84]	; 0x54
 800168c:	e007      	b.n	800169e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001692:	f043 0210 	orr.w	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800169e:	7ffb      	ldrb	r3, [r7, #31]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3724      	adds	r7, #36	; 0x24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd90      	pop	{r4, r7, pc}
 80016a8:	20000000 	.word	0x20000000
 80016ac:	053e2d63 	.word	0x053e2d63
 80016b0:	50040000 	.word	0x50040000
 80016b4:	50040100 	.word	0x50040100
 80016b8:	50040200 	.word	0x50040200
 80016bc:	50040300 	.word	0x50040300
 80016c0:	fff0c007 	.word	0xfff0c007

080016c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016d0:	4853      	ldr	r0, [pc, #332]	; (8001820 <HAL_ADC_Start_DMA+0x15c>)
 80016d2:	f7ff fdaf 	bl	8001234 <LL_ADC_GetMultimode>
 80016d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe75 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f040 8093 	bne.w	8001810 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_Start_DMA+0x34>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e08e      	b.n	8001816 <HAL_ADC_Start_DMA+0x152>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a47      	ldr	r2, [pc, #284]	; (8001824 <HAL_ADC_Start_DMA+0x160>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d008      	beq.n	800171c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d002      	beq.n	800171c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d172      	bne.n	8001802 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 feb5 	bl	800248c <ADC_Enable>
 8001722:	4603      	mov	r3, r0
 8001724:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d165      	bne.n	80017f8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001730:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_ADC_Start_DMA+0x164>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d002      	beq.n	8001750 <HAL_ADC_Start_DMA+0x8c>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	e000      	b.n	8001752 <HAL_ADC_Start_DMA+0x8e>
 8001750:	4b36      	ldr	r3, [pc, #216]	; (800182c <HAL_ADC_Start_DMA+0x168>)
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	4293      	cmp	r3, r2
 8001758:	d002      	beq.n	8001760 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001764:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d006      	beq.n	8001786 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177c:	f023 0206 	bic.w	r2, r3, #6
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	659a      	str	r2, [r3, #88]	; 0x58
 8001784:	e002      	b.n	800178c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2200      	movs	r2, #0
 800178a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_ADC_Start_DMA+0x16c>)
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <HAL_ADC_Start_DMA+0x170>)
 800179a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a0:	4a25      	ldr	r2, [pc, #148]	; (8001838 <HAL_ADC_Start_DMA+0x174>)
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	221c      	movs	r2, #28
 80017aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0210 	orr.w	r2, r2, #16
 80017c2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3340      	adds	r3, #64	; 0x40
 80017de:	4619      	mov	r1, r3
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f001 fb2a 	bl	8002e3c <HAL_DMA_Start_IT>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fdd7 	bl	80013a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80017f6:	e00d      	b.n	8001814 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001800:	e008      	b.n	8001814 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800180e:	e001      	b.n	8001814 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001810:	2302      	movs	r3, #2
 8001812:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001814:	7dfb      	ldrb	r3, [r7, #23]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	50040300 	.word	0x50040300
 8001824:	50040200 	.word	0x50040200
 8001828:	50040100 	.word	0x50040100
 800182c:	50040000 	.word	0x50040000
 8001830:	08002657 	.word	0x08002657
 8001834:	0800272f 	.word	0x0800272f
 8001838:	0800274b 	.word	0x0800274b

0800183c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001858:	4882      	ldr	r0, [pc, #520]	; (8001a64 <HAL_ADC_IRQHandler+0x228>)
 800185a:	f7ff fceb 	bl	8001234 <LL_ADC_GetMultimode>
 800185e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d017      	beq.n	800189a <HAL_ADC_IRQHandler+0x5e>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 f851 	bl	8002934 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2202      	movs	r2, #2
 8001898:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_ADC_IRQHandler+0x72>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10a      	bne.n	80018c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8083 	beq.w	80019c0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d07d      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fc06 	bl	80010f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d062      	beq.n	80019b2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_ADC_IRQHandler+0x22c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d002      	beq.n	80018fc <HAL_ADC_IRQHandler+0xc0>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	e000      	b.n	80018fe <HAL_ADC_IRQHandler+0xc2>
 80018fc:	4b5b      	ldr	r3, [pc, #364]	; (8001a6c <HAL_ADC_IRQHandler+0x230>)
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	4293      	cmp	r3, r2
 8001904:	d008      	beq.n	8001918 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d002      	beq.n	8001918 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b09      	cmp	r3, #9
 8001916:	d104      	bne.n	8001922 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	e00c      	b.n	800193c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a50      	ldr	r2, [pc, #320]	; (8001a68 <HAL_ADC_IRQHandler+0x22c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d002      	beq.n	8001932 <HAL_ADC_IRQHandler+0xf6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	e000      	b.n	8001934 <HAL_ADC_IRQHandler+0xf8>
 8001932:	4b4e      	ldr	r3, [pc, #312]	; (8001a6c <HAL_ADC_IRQHandler+0x230>)
 8001934:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800193c:	6a3b      	ldr	r3, [r7, #32]
 800193e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d135      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b08      	cmp	r3, #8
 8001952:	d12e      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fd37 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11a      	bne.n	800199a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 020c 	bic.w	r2, r2, #12
 8001972:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d112      	bne.n	80019b2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001990:	f043 0201 	orr.w	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
 8001998:	e00b      	b.n	80019b2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199e:	f043 0210 	orr.w	r2, r3, #16
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff f82e 	bl	8000a14 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	220c      	movs	r2, #12
 80019be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_ADC_IRQHandler+0x198>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10b      	bne.n	80019ec <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 809f 	beq.w	8001b1e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8099 	beq.w	8001b1e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fbb1 	bl	8001170 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001a0e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fb6c 	bl	80010f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a1a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_ADC_IRQHandler+0x22c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d002      	beq.n	8001a2c <HAL_ADC_IRQHandler+0x1f0>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_IRQHandler+0x1f2>
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_ADC_IRQHandler+0x230>)
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d008      	beq.n	8001a48 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d002      	beq.n	8001a48 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b07      	cmp	r3, #7
 8001a46:	d104      	bne.n	8001a52 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	e013      	b.n	8001a7a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_ADC_IRQHandler+0x22c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d009      	beq.n	8001a70 <HAL_ADC_IRQHandler+0x234>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	e007      	b.n	8001a72 <HAL_ADC_IRQHandler+0x236>
 8001a62:	bf00      	nop
 8001a64:	50040300 	.word	0x50040300
 8001a68:	50040100 	.word	0x50040100
 8001a6c:	50040000 	.word	0x50040000
 8001a70:	4b7d      	ldr	r3, [pc, #500]	; (8001c68 <HAL_ADC_IRQHandler+0x42c>)
 8001a72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d047      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x25e>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03f      	beq.n	8001b10 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d13a      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d133      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d12e      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fc9b 	bl	80013f2 <LL_ADC_INJ_IsConversionOngoing>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d11a      	bne.n	8001af8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ad0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d112      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f043 0201 	orr.w	r2, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54
 8001af6:	e00b      	b.n	8001b10 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afc:	f043 0210 	orr.w	r2, r3, #16
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fee7 	bl	80028e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2260      	movs	r2, #96	; 0x60
 8001b1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d011      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x310>
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00c      	beq.n	8001b4c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f8a0 	bl	8001c84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <HAL_ADC_IRQHandler+0x340>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00d      	beq.n	8001b7c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fecd 	bl	800290c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d012      	beq.n	8001bac <HAL_ADC_IRQHandler+0x370>
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 febf 	bl	8002920 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d036      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x3e8>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d031      	beq.n	8001c24 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	e014      	b.n	8001bf8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bd4:	4825      	ldr	r0, [pc, #148]	; (8001c6c <HAL_ADC_IRQHandler+0x430>)
 8001bd6:	f7ff fb3b 	bl	8001250 <LL_ADC_GetMultiDMATransfer>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001be0:	2301      	movs	r3, #1
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	e008      	b.n	8001bf8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d10e      	bne.n	8001c1c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f043 0202 	orr.w	r2, r3, #2
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f83e 	bl	8001c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2210      	movs	r2, #16
 8001c22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d018      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x424>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	f043 0208 	orr.w	r2, r3, #8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c58:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fe4c 	bl	80028f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001c60:	bf00      	nop
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	50040000 	.word	0x50040000
 8001c6c:	50040300 	.word	0x50040300

08001c70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0b6      	sub	sp, #216	; 0xd8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x22>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e3c7      	b.n	800245e <HAL_ADC_ConfigChannel+0x7b2>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fb76 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 83a8 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d824      	bhi.n	8001d3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	3b02      	subs	r3, #2
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d81b      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0x86>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <HAL_ADC_ConfigChannel+0x54>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d11 	.word	0x08001d11
 8001d04:	08001d19 	.word	0x08001d19
 8001d08:	08001d21 	.word	0x08001d21
 8001d0c:	08001d29 	.word	0x08001d29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	220c      	movs	r2, #12
 8001d14:	605a      	str	r2, [r3, #4]
          break;
 8001d16:	e011      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2212      	movs	r2, #18
 8001d1c:	605a      	str	r2, [r3, #4]
          break;
 8001d1e:	e00d      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2218      	movs	r2, #24
 8001d24:	605a      	str	r2, [r3, #4]
          break;
 8001d26:	e009      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2e:	605a      	str	r2, [r3, #4]
          break;
 8001d30:	e004      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2206      	movs	r2, #6
 8001d36:	605a      	str	r2, [r3, #4]
          break;
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001d3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	f7ff f9e5 	bl	8001118 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fb3a 	bl	80013cc <LL_ADC_REG_IsConversionOngoing>
 8001d58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fb46 	bl	80013f2 <LL_ADC_INJ_IsConversionOngoing>
 8001d66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f040 81a6 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 81a1 	bne.w	80020c0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6819      	ldr	r1, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f7ff fa03 	bl	8001196 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	08db      	lsrs	r3, r3, #3
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d00a      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6919      	ldr	r1, [r3, #16]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dc2:	f7ff f941 	bl	8001048 <LL_ADC_SetOffset>
 8001dc6:	e17b      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f95e 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10a      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x148>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f953 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	0e9b      	lsrs	r3, r3, #26
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	e01e      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x186>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f948 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001e22:	2320      	movs	r3, #32
 8001e24:	e004      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001e26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x19e>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	e018      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e6e:	2320      	movs	r3, #32
 8001e70:	e004      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f917 	bl	80010bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2101      	movs	r1, #1
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff f8fb 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x20e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f8f0 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	e01e      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x24c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f8e5 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001edc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e004      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ef0:	fab3 f383 	clz	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x264>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	e018      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x296>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e004      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001f38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d106      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f8b4 	bl	80010bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2102      	movs	r1, #2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f898 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x2d4>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff f88d 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	0e9b      	lsrs	r3, r3, #26
 8001f7a:	f003 021f 	and.w	r2, r3, #31
 8001f7e:	e01e      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x312>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2102      	movs	r1, #2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f882 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e004      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001fb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x32a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0e9b      	lsrs	r3, r3, #26
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	e016      	b.n	8002004 <HAL_ADC_ConfigChannel+0x358>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fe8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002004:	429a      	cmp	r2, r3
 8002006:	d106      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2200      	movs	r2, #0
 800200e:	2102      	movs	r1, #2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f853 	bl	80010bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2103      	movs	r1, #3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff f837 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x396>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2103      	movs	r1, #3
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f82c 	bl	8001090 <LL_ADC_GetOffsetChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	0e9b      	lsrs	r3, r3, #26
 800203c:	f003 021f 	and.w	r2, r3, #31
 8002040:	e017      	b.n	8002072 <HAL_ADC_ConfigChannel+0x3c6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2103      	movs	r1, #3
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f821 	bl	8001090 <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800205a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800205e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d105      	bne.n	800208a <HAL_ADC_ConfigChannel+0x3de>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	e011      	b.n	80020ae <HAL_ADC_ConfigChannel+0x402>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800209a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800209c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e003      	b.n	80020ae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	2103      	movs	r1, #3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fffe 	bl	80010bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f947 	bl	8001358 <LL_ADC_IsEnabled>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f040 813f 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f7ff f884 	bl	80011ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a8e      	ldr	r2, [pc, #568]	; (8002324 <HAL_ADC_ConfigChannel+0x678>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	f040 8130 	bne.w	8002350 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x46c>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	3301      	adds	r3, #1
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2b09      	cmp	r3, #9
 800210e:	bf94      	ite	ls
 8002110:	2301      	movls	r3, #1
 8002112:	2300      	movhi	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e019      	b.n	800214c <HAL_ADC_ConfigChannel+0x4a0>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002128:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800212a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2b09      	cmp	r3, #9
 8002144:	bf94      	ite	ls
 8002146:	2301      	movls	r3, #1
 8002148:	2300      	movhi	r3, #0
 800214a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800214c:	2b00      	cmp	r3, #0
 800214e:	d079      	beq.n	8002244 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002158:	2b00      	cmp	r3, #0
 800215a:	d107      	bne.n	800216c <HAL_ADC_ConfigChannel+0x4c0>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	3301      	adds	r3, #1
 8002164:	069b      	lsls	r3, r3, #26
 8002166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800216a:	e015      	b.n	8002198 <HAL_ADC_ConfigChannel+0x4ec>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800217a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800217c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	069b      	lsls	r3, r3, #26
 8002194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x50c>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	3301      	adds	r3, #1
 80021ac:	f003 031f 	and.w	r3, r3, #31
 80021b0:	2101      	movs	r1, #1
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	e017      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x53c>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80021d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f003 031f 	and.w	r3, r3, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	ea42 0103 	orr.w	r1, r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_ADC_ConfigChannel+0x562>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	e018      	b.n	8002240 <HAL_ADC_ConfigChannel+0x594>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800222a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3301      	adds	r3, #1
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002240:	430b      	orrs	r3, r1
 8002242:	e080      	b.n	8002346 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x5b4>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	3301      	adds	r3, #1
 8002258:	069b      	lsls	r3, r3, #26
 800225a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800225e:	e015      	b.n	800228c <HAL_ADC_ConfigChannel+0x5e0>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	069b      	lsls	r3, r3, #26
 8002288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x600>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	e017      	b.n	80022dc <HAL_ADC_ConfigChannel+0x630>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	61fb      	str	r3, [r7, #28]
  return result;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x65c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	3b1e      	subs	r3, #30
 8002300:	051b      	lsls	r3, r3, #20
 8002302:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002306:	e01d      	b.n	8002344 <HAL_ADC_ConfigChannel+0x698>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	613b      	str	r3, [r7, #16]
  return result;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d103      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e005      	b.n	8002330 <HAL_ADC_ConfigChannel+0x684>
 8002324:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	051b      	lsls	r3, r3, #20
 8002340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002344:	430b      	orrs	r3, r1
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	6892      	ldr	r2, [r2, #8]
 800234a:	4619      	mov	r1, r3
 800234c:	f7fe ff23 	bl	8001196 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_ADC_ConfigChannel+0x7bc>)
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d07a      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800235c:	4843      	ldr	r0, [pc, #268]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 800235e:	f7fe fe65 	bl	800102c <LL_ADC_GetCommonPathInternalCh>
 8002362:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a41      	ldr	r2, [pc, #260]	; (8002470 <HAL_ADC_ConfigChannel+0x7c4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d12c      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d126      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3c      	ldr	r2, [pc, #240]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d004      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x6e4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <HAL_ADC_ConfigChannel+0x7cc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d15d      	bne.n	800244c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002398:	4619      	mov	r1, r3
 800239a:	4834      	ldr	r0, [pc, #208]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 800239c:	f7fe fe33 	bl	8001006 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_ADC_ConfigChannel+0x7d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	4a36      	ldr	r2, [pc, #216]	; (8002480 <HAL_ADC_ConfigChannel+0x7d4>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ba:	e002      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3b01      	subs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023c8:	e040      	b.n	800244c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_ADC_ConfigChannel+0x7d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d118      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x75a>
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d112      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_ConfigChannel+0x748>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_ADC_ConfigChannel+0x7cc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d12d      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fc:	4619      	mov	r1, r3
 80023fe:	481b      	ldr	r0, [pc, #108]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 8002400:	f7fe fe01 	bl	8001006 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002404:	e024      	b.n	8002450 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_ADC_ConfigChannel+0x7dc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d120      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11a      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <HAL_ADC_ConfigChannel+0x7c8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d115      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800242a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242e:	4619      	mov	r1, r3
 8002430:	480e      	ldr	r0, [pc, #56]	; (800246c <HAL_ADC_ConfigChannel+0x7c0>)
 8002432:	f7fe fde8 	bl	8001006 <LL_ADC_SetCommonPathInternalCh>
 8002436:	e00c      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0220 	orr.w	r2, r3, #32
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800244a:	e002      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002450:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800245a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800245e:	4618      	mov	r0, r3
 8002460:	37d8      	adds	r7, #216	; 0xd8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	80080000 	.word	0x80080000
 800246c:	50040300 	.word	0x50040300
 8002470:	c7520000 	.word	0xc7520000
 8002474:	50040000 	.word	0x50040000
 8002478:	50040200 	.word	0x50040200
 800247c:	20000000 	.word	0x20000000
 8002480:	053e2d63 	.word	0x053e2d63
 8002484:	cb840000 	.word	0xcb840000
 8002488:	80000001 	.word	0x80000001

0800248c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ff5b 	bl	8001358 <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d169      	bne.n	800257c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <ADC_Enable+0xfc>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e055      	b.n	800257e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe ff16 	bl	8001308 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80024dc:	482b      	ldr	r0, [pc, #172]	; (800258c <ADC_Enable+0x100>)
 80024de:	f7fe fda5 	bl	800102c <LL_ADC_GetCommonPathInternalCh>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024ec:	4b28      	ldr	r3, [pc, #160]	; (8002590 <ADC_Enable+0x104>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	4a28      	ldr	r2, [pc, #160]	; (8002594 <ADC_Enable+0x108>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	099b      	lsrs	r3, r3, #6
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002506:	e002      	b.n	800250e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3b01      	subs	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f9      	bne.n	8002508 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002514:	f7fe fd34 	bl	8000f80 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800251a:	e028      	b.n	800256e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe ff19 	bl	8001358 <LL_ADC_IsEnabled>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d104      	bne.n	8002536 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fee9 	bl	8001308 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002536:	f7fe fd23 	bl	8000f80 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d914      	bls.n	800256e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00d      	beq.n	800256e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f043 0210 	orr.w	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e007      	b.n	800257e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d1cf      	bne.n	800251c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	8000003f 	.word	0x8000003f
 800258c:	50040300 	.word	0x50040300
 8002590:	20000000 	.word	0x20000000
 8002594:	053e2d63 	.word	0x053e2d63

08002598 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe feea 	bl	800137e <LL_ADC_IsDisableOngoing>
 80025aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fed1 	bl	8001358 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d047      	beq.n	800264c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d144      	bne.n	800264c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030d 	and.w	r3, r3, #13
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10c      	bne.n	80025ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe feab 	bl	8001330 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2203      	movs	r2, #3
 80025e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025e2:	f7fe fccd 	bl	8000f80 <HAL_GetTick>
 80025e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025e8:	e029      	b.n	800263e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e023      	b.n	800264e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002606:	f7fe fcbb 	bl	8000f80 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d914      	bls.n	800263e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0210 	orr.w	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e007      	b.n	800264e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1dc      	bne.n	8002606 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b084      	sub	sp, #16
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800266c:	2b00      	cmp	r3, #0
 800266e:	d14b      	bne.n	8002708 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d021      	beq.n	80026ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fd2f 	bl	80010f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d032      	beq.n	8002700 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d12b      	bne.n	8002700 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d11f      	bne.n	8002700 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f043 0201 	orr.w	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
 80026cc:	e018      	b.n	8002700 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7fe f987 	bl	8000a14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002706:	e00e      	b.n	8002726 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff fabf 	bl	8001c98 <HAL_ADC_ErrorCallback>
}
 800271a:	e004      	b.n	8002726 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	4798      	blx	r3
}
 8002726:	bf00      	nop
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff fa97 	bl	8001c70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	f043 0204 	orr.w	r2, r3, #4
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff fa91 	bl	8001c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <LL_ADC_IsEnabled>:
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <LL_ADC_IsEnabled+0x18>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <LL_ADC_IsEnabled+0x1a>
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <LL_ADC_StartCalibration>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80027b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_IsCalibrationOnGoing>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ea:	d101      	bne.n	80027f0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <LL_ADC_REG_IsConversionOngoing>:
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b04      	cmp	r3, #4
 8002810:	d101      	bne.n	8002816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_ADCEx_Calibration_Start+0x1c>
 800283c:	2302      	movs	r3, #2
 800283e:	e04d      	b.n	80028dc <HAL_ADCEx_Calibration_Start+0xb8>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fea5 	bl	8002598 <ADC_Disable>
 800284e:	4603      	mov	r3, r0
 8002850:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d136      	bne.n	80028c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002860:	f023 0302 	bic.w	r3, r3, #2
 8002864:	f043 0202 	orr.w	r2, r3, #2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6839      	ldr	r1, [r7, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff96 	bl	80027a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002878:	e014      	b.n	80028a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002886:	d30d      	bcc.n	80028a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288c:	f023 0312 	bic.w	r3, r3, #18
 8002890:	f043 0210 	orr.w	r2, r3, #16
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e01b      	b.n	80028dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff94 	bl	80027d6 <LL_ADC_IsCalibrationOnGoing>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e2      	bne.n	800287a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
 80028c4:	e005      	b.n	80028d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f043 0210 	orr.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b09f      	sub	sp, #124	; 0x7c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002962:	2302      	movs	r3, #2
 8002964:	e093      	b.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800296e:	2300      	movs	r3, #0
 8002970:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002972:	2300      	movs	r3, #0
 8002974:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a47      	ldr	r2, [pc, #284]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d102      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002980:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	e001      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e072      	b.n	8002a8e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff27 	bl	80027fe <LL_ADC_REG_IsConversionOngoing>
 80029b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff21 	bl	80027fe <LL_ADC_REG_IsConversionOngoing>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d154      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d151      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80029ca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02c      	beq.n	8002a2e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029e6:	035b      	lsls	r3, r3, #13
 80029e8:	430b      	orrs	r3, r1
 80029ea:	431a      	orrs	r2, r3
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029f0:	4829      	ldr	r0, [pc, #164]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029f2:	f7ff fec4 	bl	800277e <LL_ADC_IsEnabled>
 80029f6:	4604      	mov	r4, r0
 80029f8:	4828      	ldr	r0, [pc, #160]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029fa:	f7ff fec0 	bl	800277e <LL_ADC_IsEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	431c      	orrs	r4, r3
 8002a02:	4828      	ldr	r0, [pc, #160]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a04:	f7ff febb 	bl	800277e <LL_ADC_IsEnabled>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d137      	bne.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a18:	f023 030f 	bic.w	r3, r3, #15
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	6811      	ldr	r1, [r2, #0]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	6892      	ldr	r2, [r2, #8]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	431a      	orrs	r2, r3
 8002a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a2a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a2c:	e028      	b.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a3a:	4817      	ldr	r0, [pc, #92]	; (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a3c:	f7ff fe9f 	bl	800277e <LL_ADC_IsEnabled>
 8002a40:	4604      	mov	r4, r0
 8002a42:	4816      	ldr	r0, [pc, #88]	; (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a44:	f7ff fe9b 	bl	800277e <LL_ADC_IsEnabled>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	431c      	orrs	r4, r3
 8002a4c:	4815      	ldr	r0, [pc, #84]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a4e:	f7ff fe96 	bl	800277e <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4323      	orrs	r3, r4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d112      	bne.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a62:	f023 030f 	bic.w	r3, r3, #15
 8002a66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a68:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a6a:	e009      	b.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f043 0220 	orr.w	r2, r3, #32
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a7e:	e000      	b.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a8a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	377c      	adds	r7, #124	; 0x7c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	bf00      	nop
 8002a98:	50040000 	.word	0x50040000
 8002a9c:	50040100 	.word	0x50040100
 8002aa0:	50040300 	.word	0x50040300
 8002aa4:	50040200 	.word	0x50040200

08002aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ada:	4a04      	ldr	r2, [pc, #16]	; (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	60d3      	str	r3, [r2, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <__NVIC_GetPriorityGrouping+0x18>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 0307 	and.w	r3, r3, #7
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db0b      	blt.n	8002b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4907      	ldr	r1, [pc, #28]	; (8002b44 <__NVIC_EnableIRQ+0x38>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f7ff ff8e 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff29 	bl	8002aa8 <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff ff3e 	bl	8002af0 <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff8e 	bl	8002b9c <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5d 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff31 	bl	8002b0c <__NVIC_EnableIRQ>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffa2 	bl	8002c04 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e098      	b.n	8002e10 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_DMA_Init+0x150>)
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d80f      	bhi.n	8002d0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <HAL_DMA_Init+0x154>)
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	; (8002e24 <HAL_DMA_Init+0x158>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	091b      	lsrs	r3, r3, #4
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a48      	ldr	r2, [pc, #288]	; (8002e28 <HAL_DMA_Init+0x15c>)
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
 8002d08:	e00e      	b.n	8002d28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_DMA_Init+0x160>)
 8002d12:	4413      	add	r3, r2
 8002d14:	4a43      	ldr	r2, [pc, #268]	; (8002e24 <HAL_DMA_Init+0x158>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a42      	ldr	r2, [pc, #264]	; (8002e30 <HAL_DMA_Init+0x164>)
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d82:	d039      	beq.n	8002df8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4a27      	ldr	r2, [pc, #156]	; (8002e28 <HAL_DMA_Init+0x15c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d11a      	bne.n	8002dc4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d8e:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f003 031c 	and.w	r3, r3, #28
 8002d9a:	210f      	movs	r1, #15
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	4924      	ldr	r1, [pc, #144]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002da4:	4013      	ands	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6859      	ldr	r1, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	f003 031c 	and.w	r3, r3, #28
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	491d      	ldr	r1, [pc, #116]	; (8002e34 <HAL_DMA_Init+0x168>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
 8002dc2:	e019      	b.n	8002df8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	f003 031c 	and.w	r3, r3, #28
 8002dd0:	210f      	movs	r1, #15
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	4917      	ldr	r1, [pc, #92]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f003 031c 	and.w	r3, r3, #28
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	4911      	ldr	r1, [pc, #68]	; (8002e38 <HAL_DMA_Init+0x16c>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40020407 	.word	0x40020407
 8002e20:	bffdfff8 	.word	0xbffdfff8
 8002e24:	cccccccd 	.word	0xcccccccd
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	bffdfbf8 	.word	0xbffdfbf8
 8002e30:	40020400 	.word	0x40020400
 8002e34:	400200a8 	.word	0x400200a8
 8002e38:	400204a8 	.word	0x400204a8

08002e3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_DMA_Start_IT+0x20>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e04b      	b.n	8002ef4 <HAL_DMA_Start_IT+0xb8>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d13a      	bne.n	8002ee6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f8e0 	bl	800305a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 020e 	orr.w	r2, r2, #14
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	e00f      	b.n	8002ed4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 020a 	orr.w	r2, r2, #10
 8002ed2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	e005      	b.n	8002ef2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f003 031c 	and.w	r3, r3, #28
 8002f1c:	2204      	movs	r2, #4
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d026      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x7a>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d021      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0204 	bic.w	r2, r2, #4
 8002f4e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f003 021c 	and.w	r2, r3, #28
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f62:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d071      	beq.n	8003050 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f74:	e06c      	b.n	8003050 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f003 031c 	and.w	r3, r3, #28
 8002f7e:	2202      	movs	r2, #2
 8002f80:	409a      	lsls	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d02e      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xec>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d029      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10b      	bne.n	8002fba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 020a 	bic.w	r2, r2, #10
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f003 021c 	and.w	r2, r3, #28
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d038      	beq.n	8003050 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fe6:	e033      	b.n	8003050 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fec:	f003 031c 	and.w	r3, r3, #28
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d02a      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d025      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 020e 	bic.w	r2, r2, #14
 8003014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f003 021c 	and.w	r2, r3, #28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003044:	2b00      	cmp	r3, #0
 8003046:	d004      	beq.n	8003052 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003050:	bf00      	nop
 8003052:	bf00      	nop
}
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f003 021c 	and.w	r2, r3, #28
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f202 	lsl.w	r2, r1, r2
 800307a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b10      	cmp	r3, #16
 800308a:	d108      	bne.n	800309e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800309c:	e007      	b.n	80030ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ca:	e17f      	b.n	80033cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8171 	beq.w	80033c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d005      	beq.n	80030fc <HAL_GPIO_Init+0x40>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d130      	bne.n	800315e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003132:	2201      	movs	r2, #1
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0201 	and.w	r2, r3, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b03      	cmp	r3, #3
 8003168:	d118      	bne.n	800319c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80ac 	beq.w	80033c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	4b5f      	ldr	r3, [pc, #380]	; (80033ec <HAL_GPIO_Init+0x330>)
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	4a5e      	ldr	r2, [pc, #376]	; (80033ec <HAL_GPIO_Init+0x330>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6613      	str	r3, [r2, #96]	; 0x60
 800327a:	4b5c      	ldr	r3, [pc, #368]	; (80033ec <HAL_GPIO_Init+0x330>)
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003286:	4a5a      	ldr	r2, [pc, #360]	; (80033f0 <HAL_GPIO_Init+0x334>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032b0:	d025      	beq.n	80032fe <HAL_GPIO_Init+0x242>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4f      	ldr	r2, [pc, #316]	; (80033f4 <HAL_GPIO_Init+0x338>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01f      	beq.n	80032fa <HAL_GPIO_Init+0x23e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4e      	ldr	r2, [pc, #312]	; (80033f8 <HAL_GPIO_Init+0x33c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d019      	beq.n	80032f6 <HAL_GPIO_Init+0x23a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4d      	ldr	r2, [pc, #308]	; (80033fc <HAL_GPIO_Init+0x340>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_GPIO_Init+0x236>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4c      	ldr	r2, [pc, #304]	; (8003400 <HAL_GPIO_Init+0x344>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00d      	beq.n	80032ee <HAL_GPIO_Init+0x232>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <HAL_GPIO_Init+0x348>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <HAL_GPIO_Init+0x22e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4a      	ldr	r2, [pc, #296]	; (8003408 <HAL_GPIO_Init+0x34c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d101      	bne.n	80032e6 <HAL_GPIO_Init+0x22a>
 80032e2:	2306      	movs	r3, #6
 80032e4:	e00c      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032e6:	2307      	movs	r3, #7
 80032e8:	e00a      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032ea:	2305      	movs	r3, #5
 80032ec:	e008      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032ee:	2304      	movs	r3, #4
 80032f0:	e006      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032f2:	2303      	movs	r3, #3
 80032f4:	e004      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e002      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_GPIO_Init+0x244>
 80032fe:	2300      	movs	r3, #0
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	f002 0203 	and.w	r2, r2, #3
 8003306:	0092      	lsls	r2, r2, #2
 8003308:	4093      	lsls	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003310:	4937      	ldr	r1, [pc, #220]	; (80033f0 <HAL_GPIO_Init+0x334>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800331e:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_GPIO_Init+0x350>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003342:	4a32      	ldr	r2, [pc, #200]	; (800340c <HAL_GPIO_Init+0x350>)
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003348:	4b30      	ldr	r3, [pc, #192]	; (800340c <HAL_GPIO_Init+0x350>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800336c:	4a27      	ldr	r2, [pc, #156]	; (800340c <HAL_GPIO_Init+0x350>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <HAL_GPIO_Init+0x350>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43db      	mvns	r3, r3
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_GPIO_Init+0x350>)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_GPIO_Init+0x350>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033c0:	4a12      	ldr	r2, [pc, #72]	; (800340c <HAL_GPIO_Init+0x350>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3301      	adds	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	fa22 f303 	lsr.w	r3, r2, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f47f ae78 	bne.w	80030cc <HAL_GPIO_Init+0x10>
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010000 	.word	0x40010000
 80033f4:	48000400 	.word	0x48000400
 80033f8:	48000800 	.word	0x48000800
 80033fc:	48000c00 	.word	0x48000c00
 8003400:	48001000 	.word	0x48001000
 8003404:	48001400 	.word	0x48001400
 8003408:	48001800 	.word	0x48001800
 800340c:	40010400 	.word	0x40010400

08003410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	807b      	strh	r3, [r7, #2]
 800341c:	4613      	mov	r3, r2
 800341e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003420:	787b      	ldrb	r3, [r7, #1]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003426:	887a      	ldrh	r2, [r7, #2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800342c:	e002      	b.n	8003434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_PWREx_GetVoltageRange+0x18>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800344c:	4618      	mov	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40007000 	.word	0x40007000

0800345c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800346a:	d130      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d038      	beq.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003482:	4a1e      	ldr	r2, [pc, #120]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2232      	movs	r2, #50	; 0x32
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0c9b      	lsrs	r3, r3, #18
 800349c:	3301      	adds	r3, #1
 800349e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a0:	e002      	b.n	80034a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b4:	d102      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f2      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c8:	d110      	bne.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e00f      	b.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034da:	d007      	beq.n	80034ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034e4:	4a05      	ldr	r2, [pc, #20]	; (80034fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000
 8003500:	20000000 	.word	0x20000000
 8003504:	431bde83 	.word	0x431bde83

08003508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b088      	sub	sp, #32
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e3ca      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800351a:	4b97      	ldr	r3, [pc, #604]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003524:	4b94      	ldr	r3, [pc, #592]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80e4 	beq.w	8003704 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_RCC_OscConfig+0x4a>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	f040 808b 	bne.w	8003660 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 8087 	bne.w	8003660 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003552:	4b89      	ldr	r3, [pc, #548]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x62>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e3a2      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1a      	ldr	r2, [r3, #32]
 800356e:	4b82      	ldr	r3, [pc, #520]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_RCC_OscConfig+0x7c>
 800357a:	4b7f      	ldr	r3, [pc, #508]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003582:	e005      	b.n	8003590 <HAL_RCC_OscConfig+0x88>
 8003584:	4b7c      	ldr	r3, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003590:	4293      	cmp	r3, r2
 8003592:	d223      	bcs.n	80035dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fd55 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e383      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035a8:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a72      	ldr	r2, [pc, #456]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035ae:	f043 0308 	orr.w	r3, r3, #8
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b70      	ldr	r3, [pc, #448]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	496d      	ldr	r1, [pc, #436]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c6:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	4968      	ldr	r1, [pc, #416]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
 80035da:	e025      	b.n	8003628 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035e2:	f043 0308 	orr.w	r3, r3, #8
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b63      	ldr	r3, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4960      	ldr	r1, [pc, #384]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	495b      	ldr	r1, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fd15 	bl	8004048 <RCC_SetFlashLatencyFromMSIRange>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e343      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003628:	f000 fc4a 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b52      	ldr	r3, [pc, #328]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	091b      	lsrs	r3, r3, #4
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	4950      	ldr	r1, [pc, #320]	; (800377c <HAL_RCC_OscConfig+0x274>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	4a4e      	ldr	r2, [pc, #312]	; (8003780 <HAL_RCC_OscConfig+0x278>)
 8003646:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003648:	4b4e      	ldr	r3, [pc, #312]	; (8003784 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fc47 	bl	8000ee0 <HAL_InitTick>
 8003652:	4603      	mov	r3, r0
 8003654:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d052      	beq.n	8003702 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	e327      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d032      	beq.n	80036ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003668:	4b43      	ldr	r3, [pc, #268]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a42      	ldr	r2, [pc, #264]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003674:	f7fd fc84 	bl	8000f80 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800367c:	f7fd fc80 	bl	8000f80 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e310      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800368e:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800369a:	4b37      	ldr	r3, [pc, #220]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a36      	ldr	r2, [pc, #216]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036a0:	f043 0308 	orr.w	r3, r3, #8
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4931      	ldr	r1, [pc, #196]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b8:	4b2f      	ldr	r3, [pc, #188]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	492c      	ldr	r1, [pc, #176]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
 80036cc:	e01a      	b.n	8003704 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ce:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a29      	ldr	r2, [pc, #164]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036da:	f7fd fc51 	bl	8000f80 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e2:	f7fd fc4d 	bl	8000f80 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e2dd      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f0      	bne.n	80036e2 <HAL_RCC_OscConfig+0x1da>
 8003700:	e000      	b.n	8003704 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003702:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d074      	beq.n	80037fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x21a>
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d10e      	bne.n	800373a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b03      	cmp	r3, #3
 8003720:	d10b      	bne.n	800373a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d064      	beq.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d160      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e2ba      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003742:	d106      	bne.n	8003752 <HAL_RCC_OscConfig+0x24a>
 8003744:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	e026      	b.n	80037a0 <HAL_RCC_OscConfig+0x298>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375a:	d115      	bne.n	8003788 <HAL_RCC_OscConfig+0x280>
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a05      	ldr	r2, [pc, #20]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 8003762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b03      	ldr	r3, [pc, #12]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a02      	ldr	r2, [pc, #8]	; (8003778 <HAL_RCC_OscConfig+0x270>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x298>
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	08006600 	.word	0x08006600
 8003780:	20000000 	.word	0x20000000
 8003784:	20000004 	.word	0x20000004
 8003788:	4ba0      	ldr	r3, [pc, #640]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a9f      	ldr	r2, [pc, #636]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b9d      	ldr	r3, [pc, #628]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a9c      	ldr	r2, [pc, #624]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fbea 	bl	8000f80 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fd fbe6 	bl	8000f80 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e276      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c2:	4b92      	ldr	r3, [pc, #584]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x2a8>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d0:	f7fd fbd6 	bl	8000f80 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd fbd2 	bl	8000f80 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e262      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ea:	4b88      	ldr	r3, [pc, #544]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x2d0>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d060      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x310>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d119      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2b02      	cmp	r3, #2
 8003816:	d116      	bne.n	8003846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	4b7c      	ldr	r3, [pc, #496]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_OscConfig+0x328>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e23f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b76      	ldr	r3, [pc, #472]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	061b      	lsls	r3, r3, #24
 800383e:	4973      	ldr	r1, [pc, #460]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003844:	e040      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d023      	beq.n	8003896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384e:	4b6f      	ldr	r3, [pc, #444]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a6e      	ldr	r2, [pc, #440]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fd fb91 	bl	8000f80 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003862:	f7fd fb8d 	bl	8000f80 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e21d      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003874:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	495f      	ldr	r1, [pc, #380]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e018      	b.n	80038c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b5d      	ldr	r3, [pc, #372]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5c      	ldr	r2, [pc, #368]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800389c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd fb6d 	bl	8000f80 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fd fb69 	bl	8000f80 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1f9      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d03c      	beq.n	800394e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038dc:	4b4b      	ldr	r3, [pc, #300]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e2:	4a4a      	ldr	r2, [pc, #296]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fd fb48 	bl	8000f80 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fd fb44 	bl	8000f80 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1d4      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0ef      	beq.n	80038f4 <HAL_RCC_OscConfig+0x3ec>
 8003914:	e01b      	b.n	800394e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800391c:	4a3b      	ldr	r2, [pc, #236]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fd fb2b 	bl	8000f80 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392e:	f7fd fb27 	bl	8000f80 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1b7      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003940:	4b32      	ldr	r3, [pc, #200]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ef      	bne.n	800392e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a6 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003960:	4b2a      	ldr	r3, [pc, #168]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	4a26      	ldr	r2, [pc, #152]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	; 0x58
 8003978:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <HAL_RCC_OscConfig+0x508>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d118      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003994:	4b1e      	ldr	r3, [pc, #120]	; (8003a10 <HAL_RCC_OscConfig+0x508>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_RCC_OscConfig+0x508>)
 800399a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a0:	f7fd faee 	bl	8000f80 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fd faea 	bl	8000f80 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e17a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_RCC_OscConfig+0x508>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d108      	bne.n	80039e0 <HAL_RCC_OscConfig+0x4d8>
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d4:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039de:	e029      	b.n	8003a34 <HAL_RCC_OscConfig+0x52c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b05      	cmp	r3, #5
 80039e6:	d115      	bne.n	8003a14 <HAL_RCC_OscConfig+0x50c>
 80039e8:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	4a03      	ldr	r2, [pc, #12]	; (8003a0c <HAL_RCC_OscConfig+0x504>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a08:	e014      	b.n	8003a34 <HAL_RCC_OscConfig+0x52c>
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	4b9c      	ldr	r3, [pc, #624]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a9b      	ldr	r2, [pc, #620]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a24:	4b98      	ldr	r3, [pc, #608]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	4a97      	ldr	r2, [pc, #604]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fd faa0 	bl	8000f80 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fd fa9c 	bl	8000f80 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e12a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5a:	4b8b      	ldr	r3, [pc, #556]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ed      	beq.n	8003a44 <HAL_RCC_OscConfig+0x53c>
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fd fa89 	bl	8000f80 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fd fa85 	bl	8000f80 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e113      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a88:	4b7f      	ldr	r3, [pc, #508]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ed      	bne.n	8003a72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a96:	7ffb      	ldrb	r3, [r7, #31]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b7a      	ldr	r3, [pc, #488]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	4a79      	ldr	r2, [pc, #484]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80fe 	beq.w	8003cae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	f040 80d0 	bne.w	8003c5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003abc:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d130      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	3b01      	subs	r3, #1
 8003adc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d127      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d11f      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003afc:	2a07      	cmp	r2, #7
 8003afe:	bf14      	ite	ne
 8003b00:	2201      	movne	r2, #1
 8003b02:	2200      	moveq	r2, #0
 8003b04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d113      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	3b01      	subs	r3, #1
 8003b18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d06e      	beq.n	8003c10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b0c      	cmp	r3, #12
 8003b36:	d069      	beq.n	8003c0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b38:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d105      	bne.n	8003b50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b44:	4b50      	ldr	r3, [pc, #320]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e0ad      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b54:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a4b      	ldr	r2, [pc, #300]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b60:	f7fd fa0e 	bl	8000f80 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fd fa0a 	bl	8000f80 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e09a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7a:	4b43      	ldr	r3, [pc, #268]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b86:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <HAL_RCC_OscConfig+0x784>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b96:	3a01      	subs	r2, #1
 8003b98:	0112      	lsls	r2, r2, #4
 8003b9a:	4311      	orrs	r1, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ba0:	0212      	lsls	r2, r2, #8
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ba8:	0852      	lsrs	r2, r2, #1
 8003baa:	3a01      	subs	r2, #1
 8003bac:	0552      	lsls	r2, r2, #21
 8003bae:	4311      	orrs	r1, r2
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bb4:	0852      	lsrs	r2, r2, #1
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0652      	lsls	r2, r2, #25
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc0:	0912      	lsrs	r2, r2, #4
 8003bc2:	0452      	lsls	r2, r2, #17
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	4930      	ldr	r1, [pc, #192]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd8:	4b2b      	ldr	r3, [pc, #172]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be4:	f7fd f9cc 	bl	8000f80 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fd f9c8 	bl	8000f80 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e058      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c0a:	e050      	b.n	8003cae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e04f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d148      	bne.n	8003cae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c28:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c34:	f7fd f9a4 	bl	8000f80 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd f9a0 	bl	8000f80 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e030      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x734>
 8003c5a:	e028      	b.n	8003cae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b0c      	cmp	r3, #12
 8003c60:	d023      	beq.n	8003caa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <HAL_RCC_OscConfig+0x780>)
 8003c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd f987 	bl	8000f80 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c74:	e00c      	b.n	8003c90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c76:	f7fd f983 	bl	8000f80 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d905      	bls.n	8003c90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e013      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_OscConfig+0x7b0>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ec      	bne.n	8003c76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCC_OscConfig+0x7b0>)
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	4905      	ldr	r1, [pc, #20]	; (8003cb8 <HAL_RCC_OscConfig+0x7b0>)
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_OscConfig+0x7b4>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60cb      	str	r3, [r1, #12]
 8003ca8:	e001      	b.n	8003cae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3720      	adds	r7, #32
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	feeefffc 	.word	0xfeeefffc

08003cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0e7      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b75      	ldr	r3, [pc, #468]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d910      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b72      	ldr	r3, [pc, #456]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 0207 	bic.w	r2, r3, #7
 8003cea:	4970      	ldr	r1, [pc, #448]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf2:	4b6e      	ldr	r3, [pc, #440]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0cf      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d010      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	4b66      	ldr	r3, [pc, #408]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d908      	bls.n	8003d32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d20:	4b63      	ldr	r3, [pc, #396]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4960      	ldr	r1, [pc, #384]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d04c      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	4b5a      	ldr	r3, [pc, #360]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d121      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0a6      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d5e:	4b54      	ldr	r3, [pc, #336]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d115      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e09a      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d76:	4b4e      	ldr	r3, [pc, #312]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e08e      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d86:	4b4a      	ldr	r3, [pc, #296]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e086      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4943      	ldr	r1, [pc, #268]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da8:	f7fd f8ea 	bl	8000f80 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7fd f8e6 	bl	8000f80 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e06e      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d208      	bcs.n	8003e06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	492b      	ldr	r1, [pc, #172]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d210      	bcs.n	8003e36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e14:	4b25      	ldr	r3, [pc, #148]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f023 0207 	bic.w	r2, r3, #7
 8003e1c:	4923      	ldr	r1, [pc, #140]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCC_ClockConfig+0x1ec>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e036      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e42:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4918      	ldr	r1, [pc, #96]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e60:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4910      	ldr	r1, [pc, #64]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e74:	f000 f824 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	490b      	ldr	r1, [pc, #44]	; (8003eb4 <HAL_RCC_ClockConfig+0x1f4>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	4a09      	ldr	r2, [pc, #36]	; (8003eb8 <HAL_RCC_ClockConfig+0x1f8>)
 8003e92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <HAL_RCC_ClockConfig+0x1fc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd f821 	bl	8000ee0 <HAL_InitTick>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40022000 	.word	0x40022000
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	08006600 	.word	0x08006600
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	20000004 	.word	0x20000004

08003ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ece:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d121      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d11e      	bne.n	8003f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ef4:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d107      	bne.n	8003f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f00:	4b31      	ldr	r3, [pc, #196]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e005      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f10:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f1c:	4a2b      	ldr	r2, [pc, #172]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d102      	bne.n	8003f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e004      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d134      	bne.n	8003fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d003      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d003      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0xac>
 8003f64:	e005      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f68:	617b      	str	r3, [r7, #20]
      break;
 8003f6a:	e005      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f6e:	617b      	str	r3, [r7, #20]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	617b      	str	r3, [r7, #20]
      break;
 8003f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	3301      	adds	r3, #1
 8003f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	fb03 f202 	mul.w	r2, r3, r2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	0e5b      	lsrs	r3, r3, #25
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	3301      	adds	r3, #1
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3724      	adds	r7, #36	; 0x24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08006618 	.word	0x08006618
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	007a1200 	.word	0x007a1200

08003fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	; (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000000 	.word	0x20000000

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ff4:	f7ff fff0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	08006610 	.word	0x08006610

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004020:	f7ff ffda 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	0adb      	lsrs	r3, r3, #11
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4904      	ldr	r1, [pc, #16]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800403c:	4618      	mov	r0, r3
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	08006610 	.word	0x08006610

08004048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004060:	f7ff f9ee 	bl	8003440 <HAL_PWREx_GetVoltageRange>
 8004064:	6178      	str	r0, [r7, #20]
 8004066:	e014      	b.n	8004092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	4a24      	ldr	r2, [pc, #144]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004080:	f7ff f9de 	bl	8003440 <HAL_PWREx_GetVoltageRange>
 8004084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004090:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d10b      	bne.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d919      	bls.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2ba0      	cmp	r3, #160	; 0xa0
 80040a4:	d902      	bls.n	80040ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040a6:	2302      	movs	r3, #2
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	e013      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040ac:	2301      	movs	r3, #1
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	e010      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d902      	bls.n	80040be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040b8:	2303      	movs	r3, #3
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	e00a      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b80      	cmp	r3, #128	; 0x80
 80040c2:	d102      	bne.n	80040ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c4:	2302      	movs	r3, #2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e004      	b.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d101      	bne.n	80040d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040d0:	2301      	movs	r3, #1
 80040d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 0207 	bic.w	r2, r3, #7
 80040dc:	4909      	ldr	r1, [pc, #36]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	40022000 	.word	0x40022000

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004110:	2300      	movs	r3, #0
 8004112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004114:	2300      	movs	r3, #0
 8004116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d041      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004128:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800412c:	d02a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800412e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004132:	d824      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004138:	d008      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800413a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800413e:	d81e      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004148:	d010      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800414a:	e018      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800414c:	4b86      	ldr	r3, [pc, #536]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a85      	ldr	r2, [pc, #532]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004156:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004158:	e015      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fabb 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800416a:	e00c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3320      	adds	r3, #32
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fba6 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800417c:	e003      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	74fb      	strb	r3, [r7, #19]
      break;
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800418c:	4b76      	ldr	r3, [pc, #472]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800419a:	4973      	ldr	r1, [pc, #460]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041a2:	e001      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d041      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041bc:	d02a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041c2:	d824      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041c8:	d008      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ce:	d81e      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041d8:	d010      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041da:	e018      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041dc:	4b62      	ldr	r3, [pc, #392]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a61      	ldr	r2, [pc, #388]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041e8:	e015      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa73 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041fa:	e00c      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3320      	adds	r3, #32
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fb5e 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	74fb      	strb	r3, [r7, #19]
      break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004216:	7cfb      	ldrb	r3, [r7, #19]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800421c:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800422a:	494f      	ldr	r1, [pc, #316]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7cfb      	ldrb	r3, [r7, #19]
 8004236:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80a0 	beq.w	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800424a:	4b47      	ldr	r3, [pc, #284]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	4b41      	ldr	r3, [pc, #260]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	4a40      	ldr	r2, [pc, #256]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426a:	6593      	str	r3, [r2, #88]	; 0x58
 800426c:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004278:	2301      	movs	r3, #1
 800427a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a3a      	ldr	r2, [pc, #232]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004288:	f7fc fe7a 	bl	8000f80 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800428e:	e009      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004290:	f7fc fe76 	bl	8000f80 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d902      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	74fb      	strb	r3, [r7, #19]
        break;
 80042a2:	e005      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0ef      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d15c      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042b6:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d019      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a20      	ldr	r2, [pc, #128]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004300:	4a19      	ldr	r2, [pc, #100]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004312:	f7fc fe35 	bl	8000f80 <HAL_GetTick>
 8004316:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004318:	e00b      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fc fe31 	bl	8000f80 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d902      	bls.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	74fb      	strb	r3, [r7, #19]
            break;
 8004330:	e006      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ec      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10c      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004356:	4904      	ldr	r1, [pc, #16]	; (8004368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800435e:	e009      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	74bb      	strb	r3, [r7, #18]
 8004364:	e006      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004366:	bf00      	nop
 8004368:	40021000 	.word	0x40021000
 800436c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7cfb      	ldrb	r3, [r7, #19]
 8004372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004374:	7c7b      	ldrb	r3, [r7, #17]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4b9e      	ldr	r3, [pc, #632]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	4a9d      	ldr	r2, [pc, #628]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004384:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004392:	4b98      	ldr	r3, [pc, #608]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f023 0203 	bic.w	r2, r3, #3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a0:	4994      	ldr	r1, [pc, #592]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043b4:	4b8f      	ldr	r3, [pc, #572]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f023 020c 	bic.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	498c      	ldr	r1, [pc, #560]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043d6:	4b87      	ldr	r3, [pc, #540]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	4983      	ldr	r1, [pc, #524]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043f8:	4b7e      	ldr	r3, [pc, #504]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	497b      	ldr	r1, [pc, #492]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800441a:	4b76      	ldr	r3, [pc, #472]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	4972      	ldr	r1, [pc, #456]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800443c:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800444a:	496a      	ldr	r1, [pc, #424]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800445e:	4b65      	ldr	r3, [pc, #404]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	4961      	ldr	r1, [pc, #388]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004480:	4b5c      	ldr	r3, [pc, #368]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448e:	4959      	ldr	r1, [pc, #356]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b0:	4950      	ldr	r1, [pc, #320]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	4948      	ldr	r1, [pc, #288]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044e6:	4b43      	ldr	r3, [pc, #268]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	493f      	ldr	r1, [pc, #252]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d028      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004508:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004516:	4937      	ldr	r1, [pc, #220]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004522:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004526:	d106      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004528:	4b32      	ldr	r3, [pc, #200]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a31      	ldr	r2, [pc, #196]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004532:	60d3      	str	r3, [r2, #12]
 8004534:	e011      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800453a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800453e:	d10c      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2101      	movs	r1, #1
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f8c8 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d028      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004566:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	491f      	ldr	r1, [pc, #124]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004584:	d106      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004590:	60d3      	str	r3, [r2, #12]
 8004592:	e011      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800459c:	d10c      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2101      	movs	r1, #1
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 f899 	bl	80046dc <RCCEx_PLLSAI1_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d2:	4908      	ldr	r1, [pc, #32]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e2:	d109      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4a02      	ldr	r2, [pc, #8]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ee:	60d3      	str	r3, [r2, #12]
 80045f0:	e014      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045f2:	bf00      	nop
 80045f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004600:	d10c      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2101      	movs	r1, #1
 8004608:	4618      	mov	r0, r3
 800460a:	f000 f867 	bl	80046dc <RCCEx_PLLSAI1_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004618:	7cfb      	ldrb	r3, [r7, #19]
 800461a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d02f      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004628:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004636:	4928      	ldr	r1, [pc, #160]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004642:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004646:	d10d      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f844 	bl	80046dc <RCCEx_PLLSAI1_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d014      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800465e:	7cfb      	ldrb	r3, [r7, #19]
 8004660:	74bb      	strb	r3, [r7, #18]
 8004662:	e011      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466c:	d10c      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3320      	adds	r3, #32
 8004672:	2102      	movs	r1, #2
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f925 	bl	80048c4 <RCCEx_PLLSAI2_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046a2:	490d      	ldr	r1, [pc, #52]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c6:	4904      	ldr	r1, [pc, #16]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40021000 	.word	0x40021000

080046dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046ea:	4b75      	ldr	r3, [pc, #468]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d018      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f6:	4b72      	ldr	r3, [pc, #456]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f003 0203 	and.w	r2, r3, #3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d10d      	bne.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
       ||
 800470a:	2b00      	cmp	r3, #0
 800470c:	d009      	beq.n	8004722 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800470e:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
       ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d047      	beq.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e044      	b.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b03      	cmp	r3, #3
 800472e:	d018      	beq.n	8004762 <RCCEx_PLLSAI1_Config+0x86>
 8004730:	2b03      	cmp	r3, #3
 8004732:	d825      	bhi.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <RCCEx_PLLSAI1_Config+0x62>
 8004738:	2b02      	cmp	r3, #2
 800473a:	d009      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x74>
 800473c:	e020      	b.n	8004780 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800473e:	4b60      	ldr	r3, [pc, #384]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11d      	bne.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e01a      	b.n	8004786 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004750:	4b5b      	ldr	r3, [pc, #364]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e013      	b.n	800478a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004762:	4b57      	ldr	r3, [pc, #348]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10f      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800476e:	4b54      	ldr	r3, [pc, #336]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800477e:	e006      	b.n	800478e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
      break;
 8004784:	e004      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800478e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	430b      	orrs	r3, r1
 80047ac:	4944      	ldr	r1, [pc, #272]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d17d      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a40      	ldr	r2, [pc, #256]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fc fbdc 	bl	8000f80 <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ca:	e009      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047cc:	f7fc fbd8 	bl	8000f80 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d902      	bls.n	80047e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	73fb      	strb	r3, [r7, #15]
        break;
 80047de:	e005      	b.n	80047ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047e0:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1ef      	bne.n	80047cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d160      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d111      	bne.n	800481c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6892      	ldr	r2, [r2, #8]
 8004808:	0211      	lsls	r1, r2, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	0912      	lsrs	r2, r2, #4
 8004810:	0452      	lsls	r2, r2, #17
 8004812:	430a      	orrs	r2, r1
 8004814:	492a      	ldr	r1, [pc, #168]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	610b      	str	r3, [r1, #16]
 800481a:	e027      	b.n	800486c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d112      	bne.n	8004848 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004822:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800482a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6892      	ldr	r2, [r2, #8]
 8004832:	0211      	lsls	r1, r2, #8
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6912      	ldr	r2, [r2, #16]
 8004838:	0852      	lsrs	r2, r2, #1
 800483a:	3a01      	subs	r2, #1
 800483c:	0552      	lsls	r2, r2, #21
 800483e:	430a      	orrs	r2, r1
 8004840:	491f      	ldr	r1, [pc, #124]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	610b      	str	r3, [r1, #16]
 8004846:	e011      	b.n	800486c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004848:	4b1d      	ldr	r3, [pc, #116]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004850:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6892      	ldr	r2, [r2, #8]
 8004858:	0211      	lsls	r1, r2, #8
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6952      	ldr	r2, [r2, #20]
 800485e:	0852      	lsrs	r2, r2, #1
 8004860:	3a01      	subs	r2, #1
 8004862:	0652      	lsls	r2, r2, #25
 8004864:	430a      	orrs	r2, r1
 8004866:	4916      	ldr	r1, [pc, #88]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800486c:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004872:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fc fb82 	bl	8000f80 <HAL_GetTick>
 800487c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800487e:	e009      	b.n	8004894 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004880:	f7fc fb7e 	bl	8000f80 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d902      	bls.n	8004894 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	73fb      	strb	r3, [r7, #15]
          break;
 8004892:	e005      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	4904      	ldr	r1, [pc, #16]	; (80048c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000

080048c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d10d      	bne.n	800490a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
       ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80048f6:	4b61      	ldr	r3, [pc, #388]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
       ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d047      	beq.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e044      	b.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d018      	beq.n	800494a <RCCEx_PLLSAI2_Config+0x86>
 8004918:	2b03      	cmp	r3, #3
 800491a:	d825      	bhi.n	8004968 <RCCEx_PLLSAI2_Config+0xa4>
 800491c:	2b01      	cmp	r3, #1
 800491e:	d002      	beq.n	8004926 <RCCEx_PLLSAI2_Config+0x62>
 8004920:	2b02      	cmp	r3, #2
 8004922:	d009      	beq.n	8004938 <RCCEx_PLLSAI2_Config+0x74>
 8004924:	e020      	b.n	8004968 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004926:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11d      	bne.n	800496e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004936:	e01a      	b.n	800496e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004938:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d116      	bne.n	8004972 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e013      	b.n	8004972 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800494a:	4b4c      	ldr	r3, [pc, #304]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004956:	4b49      	ldr	r3, [pc, #292]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004966:	e006      	b.n	8004976 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e004      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004976:	bf00      	nop
    }

    if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800497e:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	3b01      	subs	r3, #1
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	430b      	orrs	r3, r1
 8004994:	4939      	ldr	r1, [pc, #228]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d167      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049a0:	4b36      	ldr	r3, [pc, #216]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a35      	ldr	r2, [pc, #212]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fc fae8 	bl	8000f80 <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049b2:	e009      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049b4:	f7fc fae4 	bl	8000f80 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d902      	bls.n	80049c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
        break;
 80049c6:	e005      	b.n	80049d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ef      	bne.n	80049b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d14a      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68d2      	ldr	r2, [r2, #12]
 80049f6:	0912      	lsrs	r2, r2, #4
 80049f8:	0452      	lsls	r2, r2, #17
 80049fa:	430a      	orrs	r2, r1
 80049fc:	491f      	ldr	r1, [pc, #124]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	614b      	str	r3, [r1, #20]
 8004a02:	e011      	b.n	8004a28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6892      	ldr	r2, [r2, #8]
 8004a14:	0211      	lsls	r1, r2, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6912      	ldr	r2, [r2, #16]
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0652      	lsls	r2, r2, #25
 8004a20:	430a      	orrs	r2, r1
 8004a22:	4916      	ldr	r1, [pc, #88]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a28:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fc faa4 	bl	8000f80 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a3c:	f7fc faa0 	bl	8000f80 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ef      	beq.n	8004a3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4904      	ldr	r1, [pc, #16]	; (8004a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000

08004a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e049      	b.n	8004b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc f898 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 fb7a 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e049      	b.n	8004bd4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f841 	bl	8004bdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f000 fb23 	bl	80051b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d109      	bne.n	8004c14 <HAL_TIM_PWM_Start+0x24>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	e03c      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	d109      	bne.n	8004c2e <HAL_TIM_PWM_Start+0x3e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e02f      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d109      	bne.n	8004c48 <HAL_TIM_PWM_Start+0x58>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e022      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d109      	bne.n	8004c62 <HAL_TIM_PWM_Start+0x72>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	e015      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d109      	bne.n	8004c7c <HAL_TIM_PWM_Start+0x8c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	bf14      	ite	ne
 8004c74:	2301      	movne	r3, #1
 8004c76:	2300      	moveq	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	e008      	b.n	8004c8e <HAL_TIM_PWM_Start+0x9e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e09c      	b.n	8004dd0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0xb6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca4:	e023      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0xc6>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb4:	e01b      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_PWM_Start+0xd6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc4:	e013      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0xe6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd4:	e00b      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0xf6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	e003      	b.n	8004cee <HAL_TIM_PWM_Start+0xfe>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fe68 	bl	80059cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a35      	ldr	r2, [pc, #212]	; (8004dd8 <HAL_TIM_PWM_Start+0x1e8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <HAL_TIM_PWM_Start+0x1ec>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a32      	ldr	r2, [pc, #200]	; (8004de0 <HAL_TIM_PWM_Start+0x1f0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a31      	ldr	r2, [pc, #196]	; (8004de4 <HAL_TIM_PWM_Start+0x1f4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x13e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a2f      	ldr	r2, [pc, #188]	; (8004de8 <HAL_TIM_PWM_Start+0x1f8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d101      	bne.n	8004d32 <HAL_TIM_PWM_Start+0x142>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <HAL_TIM_PWM_Start+0x144>
 8004d32:	2300      	movs	r3, #0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <HAL_TIM_PWM_Start+0x1e8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d01d      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d018      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a22      	ldr	r2, [pc, #136]	; (8004dec <HAL_TIM_PWM_Start+0x1fc>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d013      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <HAL_TIM_PWM_Start+0x200>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00e      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <HAL_TIM_PWM_Start+0x204>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <HAL_TIM_PWM_Start+0x1ec>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d004      	beq.n	8004d8e <HAL_TIM_PWM_Start+0x19e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_TIM_PWM_Start+0x1f0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d115      	bne.n	8004dba <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	4b18      	ldr	r3, [pc, #96]	; (8004df8 <HAL_TIM_PWM_Start+0x208>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b06      	cmp	r3, #6
 8004d9e:	d015      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x1dc>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d011      	beq.n	8004dcc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db8:	e008      	b.n	8004dcc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e000      	b.n	8004dce <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dcc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800
 8004df4:	40000c00 	.word	0x40000c00
 8004df8:	00010007 	.word	0x00010007

08004dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e0ff      	b.n	800501a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b14      	cmp	r3, #20
 8004e26:	f200 80f0 	bhi.w	800500a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e2a:	a201      	add	r2, pc, #4	; (adr r2, 8004e30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	0800500b 	.word	0x0800500b
 8004e38:	0800500b 	.word	0x0800500b
 8004e3c:	0800500b 	.word	0x0800500b
 8004e40:	08004ec5 	.word	0x08004ec5
 8004e44:	0800500b 	.word	0x0800500b
 8004e48:	0800500b 	.word	0x0800500b
 8004e4c:	0800500b 	.word	0x0800500b
 8004e50:	08004f07 	.word	0x08004f07
 8004e54:	0800500b 	.word	0x0800500b
 8004e58:	0800500b 	.word	0x0800500b
 8004e5c:	0800500b 	.word	0x0800500b
 8004e60:	08004f47 	.word	0x08004f47
 8004e64:	0800500b 	.word	0x0800500b
 8004e68:	0800500b 	.word	0x0800500b
 8004e6c:	0800500b 	.word	0x0800500b
 8004e70:	08004f89 	.word	0x08004f89
 8004e74:	0800500b 	.word	0x0800500b
 8004e78:	0800500b 	.word	0x0800500b
 8004e7c:	0800500b 	.word	0x0800500b
 8004e80:	08004fc9 	.word	0x08004fc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fa2e 	bl	80052ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0208 	orr.w	r2, r2, #8
 8004e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699a      	ldr	r2, [r3, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0204 	bic.w	r2, r2, #4
 8004eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6999      	ldr	r1, [r3, #24]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	619a      	str	r2, [r3, #24]
      break;
 8004ec2:	e0a5      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fa9e 	bl	800540c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699a      	ldr	r2, [r3, #24]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6999      	ldr	r1, [r3, #24]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	619a      	str	r2, [r3, #24]
      break;
 8004f04:	e084      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68b9      	ldr	r1, [r7, #8]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fb07 	bl	8005520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0208 	orr.w	r2, r2, #8
 8004f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0204 	bic.w	r2, r2, #4
 8004f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69d9      	ldr	r1, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	61da      	str	r2, [r3, #28]
      break;
 8004f44:	e064      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fb6f 	bl	8005630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69d9      	ldr	r1, [r3, #28]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	021a      	lsls	r2, r3, #8
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	61da      	str	r2, [r3, #28]
      break;
 8004f86:	e043      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fbb8 	bl	8005704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0208 	orr.w	r2, r2, #8
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0204 	bic.w	r2, r2, #4
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004fc6:	e023      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fbfc 	bl	80057cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	021a      	lsls	r2, r3, #8
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005008:	e002      	b.n	8005010 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
      break;
 800500e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop

08005024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <HAL_TIM_ConfigClockSource+0x1c>
 800503c:	2302      	movs	r3, #2
 800503e:	e0b6      	b.n	80051ae <HAL_TIM_ConfigClockSource+0x18a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800506a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d03e      	beq.n	80050fc <HAL_TIM_ConfigClockSource+0xd8>
 800507e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005082:	f200 8087 	bhi.w	8005194 <HAL_TIM_ConfigClockSource+0x170>
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508a:	f000 8086 	beq.w	800519a <HAL_TIM_ConfigClockSource+0x176>
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005092:	d87f      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 8005094:	2b70      	cmp	r3, #112	; 0x70
 8005096:	d01a      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xaa>
 8005098:	2b70      	cmp	r3, #112	; 0x70
 800509a:	d87b      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 800509c:	2b60      	cmp	r3, #96	; 0x60
 800509e:	d050      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x11e>
 80050a0:	2b60      	cmp	r3, #96	; 0x60
 80050a2:	d877      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050a4:	2b50      	cmp	r3, #80	; 0x50
 80050a6:	d03c      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0xfe>
 80050a8:	2b50      	cmp	r3, #80	; 0x50
 80050aa:	d873      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d058      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x13e>
 80050b0:	2b40      	cmp	r3, #64	; 0x40
 80050b2:	d86f      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050b4:	2b30      	cmp	r3, #48	; 0x30
 80050b6:	d064      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050b8:	2b30      	cmp	r3, #48	; 0x30
 80050ba:	d86b      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d060      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	d867      	bhi.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d05c      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d05a      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x15e>
 80050cc:	e062      	b.n	8005194 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f000 fc55 	bl	800598c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	609a      	str	r2, [r3, #8]
      break;
 80050fa:	e04f      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	6899      	ldr	r1, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f000 fc3e 	bl	800598c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800511e:	609a      	str	r2, [r3, #8]
      break;
 8005120:	e03c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	461a      	mov	r2, r3
 8005130:	f000 fbb2 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2150      	movs	r1, #80	; 0x50
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fc0b 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 8005140:	e02c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	461a      	mov	r2, r3
 8005150:	f000 fbd1 	bl	80058f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2160      	movs	r1, #96	; 0x60
 800515a:	4618      	mov	r0, r3
 800515c:	f000 fbfb 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 8005160:	e01c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	461a      	mov	r2, r3
 8005170:	f000 fb92 	bl	8005898 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2140      	movs	r1, #64	; 0x40
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fbeb 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 8005180:	e00c      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f000 fbe2 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 8005192:	e003      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e000      	b.n	800519c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800519a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a40      	ldr	r2, [pc, #256]	; (80052cc <TIM_Base_SetConfig+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d6:	d00f      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00b      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a3c      	ldr	r2, [pc, #240]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d007      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a3b      	ldr	r2, [pc, #236]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a3a      	ldr	r2, [pc, #232]	; (80052dc <TIM_Base_SetConfig+0x124>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <TIM_Base_SetConfig+0x114>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d01f      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d01b      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2c      	ldr	r2, [pc, #176]	; (80052d0 <TIM_Base_SetConfig+0x118>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d017      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <TIM_Base_SetConfig+0x11c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <TIM_Base_SetConfig+0x120>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00f      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a29      	ldr	r2, [pc, #164]	; (80052dc <TIM_Base_SetConfig+0x124>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00b      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <TIM_Base_SetConfig+0x128>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d007      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <TIM_Base_SetConfig+0x12c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_Base_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <TIM_Base_SetConfig+0x130>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d108      	bne.n	8005264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a10      	ldr	r2, [pc, #64]	; (80052cc <TIM_Base_SetConfig+0x114>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00f      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <TIM_Base_SetConfig+0x124>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00b      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <TIM_Base_SetConfig+0x128>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d007      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <TIM_Base_SetConfig+0x12c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d003      	beq.n	80052b0 <TIM_Base_SetConfig+0xf8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <TIM_Base_SetConfig+0x130>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d103      	bne.n	80052b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	615a      	str	r2, [r3, #20]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40012c00 	.word	0x40012c00
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40013400 	.word	0x40013400
 80052e0:	40014000 	.word	0x40014000
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40014800 	.word	0x40014800

080052ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f023 0201 	bic.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f023 0302 	bic.w	r3, r3, #2
 8005338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a2c      	ldr	r2, [pc, #176]	; (80053f8 <TIM_OC1_SetConfig+0x10c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00f      	beq.n	800536c <TIM_OC1_SetConfig+0x80>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a2b      	ldr	r2, [pc, #172]	; (80053fc <TIM_OC1_SetConfig+0x110>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d00b      	beq.n	800536c <TIM_OC1_SetConfig+0x80>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <TIM_OC1_SetConfig+0x114>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d007      	beq.n	800536c <TIM_OC1_SetConfig+0x80>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a29      	ldr	r2, [pc, #164]	; (8005404 <TIM_OC1_SetConfig+0x118>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC1_SetConfig+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a28      	ldr	r2, [pc, #160]	; (8005408 <TIM_OC1_SetConfig+0x11c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10c      	bne.n	8005386 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0308 	bic.w	r3, r3, #8
 8005372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f023 0304 	bic.w	r3, r3, #4
 8005384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1b      	ldr	r2, [pc, #108]	; (80053f8 <TIM_OC1_SetConfig+0x10c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00f      	beq.n	80053ae <TIM_OC1_SetConfig+0xc2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <TIM_OC1_SetConfig+0x110>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00b      	beq.n	80053ae <TIM_OC1_SetConfig+0xc2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a19      	ldr	r2, [pc, #100]	; (8005400 <TIM_OC1_SetConfig+0x114>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d007      	beq.n	80053ae <TIM_OC1_SetConfig+0xc2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a18      	ldr	r2, [pc, #96]	; (8005404 <TIM_OC1_SetConfig+0x118>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d003      	beq.n	80053ae <TIM_OC1_SetConfig+0xc2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a17      	ldr	r2, [pc, #92]	; (8005408 <TIM_OC1_SetConfig+0x11c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d111      	bne.n	80053d2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	621a      	str	r2, [r3, #32]
}
 80053ec:	bf00      	nop
 80053ee:	371c      	adds	r7, #28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40013400 	.word	0x40013400
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800

0800540c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	f023 0210 	bic.w	r2, r3, #16
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0320 	bic.w	r3, r3, #32
 800545a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a28      	ldr	r2, [pc, #160]	; (800550c <TIM_OC2_SetConfig+0x100>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_OC2_SetConfig+0x6c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a27      	ldr	r2, [pc, #156]	; (8005510 <TIM_OC2_SetConfig+0x104>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d10d      	bne.n	8005494 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005492:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1d      	ldr	r2, [pc, #116]	; (800550c <TIM_OC2_SetConfig+0x100>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00f      	beq.n	80054bc <TIM_OC2_SetConfig+0xb0>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <TIM_OC2_SetConfig+0x104>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00b      	beq.n	80054bc <TIM_OC2_SetConfig+0xb0>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <TIM_OC2_SetConfig+0x108>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_OC2_SetConfig+0xb0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1a      	ldr	r2, [pc, #104]	; (8005518 <TIM_OC2_SetConfig+0x10c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC2_SetConfig+0xb0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a19      	ldr	r2, [pc, #100]	; (800551c <TIM_OC2_SetConfig+0x110>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d113      	bne.n	80054e4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800

08005520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800556c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	021b      	lsls	r3, r3, #8
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a27      	ldr	r2, [pc, #156]	; (800561c <TIM_OC3_SetConfig+0xfc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_OC3_SetConfig+0x6a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a26      	ldr	r2, [pc, #152]	; (8005620 <TIM_OC3_SetConfig+0x100>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d10d      	bne.n	80055a6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <TIM_OC3_SetConfig+0xfc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00f      	beq.n	80055ce <TIM_OC3_SetConfig+0xae>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1b      	ldr	r2, [pc, #108]	; (8005620 <TIM_OC3_SetConfig+0x100>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00b      	beq.n	80055ce <TIM_OC3_SetConfig+0xae>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1a      	ldr	r2, [pc, #104]	; (8005624 <TIM_OC3_SetConfig+0x104>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d007      	beq.n	80055ce <TIM_OC3_SetConfig+0xae>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a19      	ldr	r2, [pc, #100]	; (8005628 <TIM_OC3_SetConfig+0x108>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC3_SetConfig+0xae>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <TIM_OC3_SetConfig+0x10c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d113      	bne.n	80055f6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40014000 	.word	0x40014000
 8005628:	40014400 	.word	0x40014400
 800562c:	40014800 	.word	0x40014800

08005630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800567e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	031b      	lsls	r3, r3, #12
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <TIM_OC4_SetConfig+0xc0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00f      	beq.n	80056b4 <TIM_OC4_SetConfig+0x84>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a17      	ldr	r2, [pc, #92]	; (80056f4 <TIM_OC4_SetConfig+0xc4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_OC4_SetConfig+0x84>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <TIM_OC4_SetConfig+0xc8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_OC4_SetConfig+0x84>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <TIM_OC4_SetConfig+0xcc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC4_SetConfig+0x84>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a14      	ldr	r2, [pc, #80]	; (8005700 <TIM_OC4_SetConfig+0xd0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d109      	bne.n	80056c8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	019b      	lsls	r3, r3, #6
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40013400 	.word	0x40013400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40014400 	.word	0x40014400
 8005700:	40014800 	.word	0x40014800

08005704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <TIM_OC5_SetConfig+0xb4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00f      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a16      	ldr	r2, [pc, #88]	; (80057bc <TIM_OC5_SetConfig+0xb8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <TIM_OC5_SetConfig+0xbc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <TIM_OC5_SetConfig+0xc0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <TIM_OC5_SetConfig+0xc4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d109      	bne.n	8005792 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800

080057cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	051b      	lsls	r3, r3, #20
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <TIM_OC6_SetConfig+0xb8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00f      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <TIM_OC6_SetConfig+0xbc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a16      	ldr	r2, [pc, #88]	; (800588c <TIM_OC6_SetConfig+0xc0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a15      	ldr	r2, [pc, #84]	; (8005890 <TIM_OC6_SetConfig+0xc4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a14      	ldr	r2, [pc, #80]	; (8005894 <TIM_OC6_SetConfig+0xc8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d109      	bne.n	800585c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800584e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	029b      	lsls	r3, r3, #10
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40013400 	.word	0x40013400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 030a 	bic.w	r3, r3, #10
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b087      	sub	sp, #28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f023 0210 	bic.w	r2, r3, #16
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005920:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005932:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	f043 0307 	orr.w	r3, r3, #7
 8005978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	609a      	str	r2, [r3, #8]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	609a      	str	r2, [r3, #8]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2201      	movs	r2, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	401a      	ands	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	431a      	orrs	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
	...

08005a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e068      	b.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2e      	ldr	r2, [pc, #184]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2d      	ldr	r2, [pc, #180]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1e      	ldr	r2, [pc, #120]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d01d      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa2:	d018      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1b      	ldr	r2, [pc, #108]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00e      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d009      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d004      	beq.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d10c      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40013400 	.word	0x40013400
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40000c00 	.word	0x40000c00
 8005b24:	40014000 	.word	0x40014000

08005b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e065      	b.n	8005c10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a14      	ldr	r2, [pc, #80]	; (8005c20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d115      	bne.n	8005bfe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	051b      	lsls	r3, r3, #20
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40013400 	.word	0x40013400

08005c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e040      	b.n	8005cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d106      	bne.n	8005c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fb f854 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2224      	movs	r2, #36	; 0x24
 8005c50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0201 	bic.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f82c 	bl	8005cc0 <UART_SetConfig>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e022      	b.n	8005cb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fad8 	bl	8006230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fb5f 	bl	8006374 <UART_CheckIdleState>
 8005cb6:	4603      	mov	r3, r0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc4:	b08a      	sub	sp, #40	; 0x28
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4ba4      	ldr	r3, [pc, #656]	; (8005f80 <UART_SetConfig+0x2c0>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a99      	ldr	r2, [pc, #612]	; (8005f84 <UART_SetConfig+0x2c4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a90      	ldr	r2, [pc, #576]	; (8005f88 <UART_SetConfig+0x2c8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d126      	bne.n	8005d98 <UART_SetConfig+0xd8>
 8005d4a:	4b90      	ldr	r3, [pc, #576]	; (8005f8c <UART_SetConfig+0x2cc>)
 8005d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d81b      	bhi.n	8005d90 <UART_SetConfig+0xd0>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0xa0>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d71 	.word	0x08005d71
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d79 	.word	0x08005d79
 8005d6c:	08005d89 	.word	0x08005d89
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d76:	e116      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7e:	e112      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d86:	e10e      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8e:	e10a      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d96:	e106      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a7c      	ldr	r2, [pc, #496]	; (8005f90 <UART_SetConfig+0x2d0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d138      	bne.n	8005e14 <UART_SetConfig+0x154>
 8005da2:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <UART_SetConfig+0x2cc>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	d82d      	bhi.n	8005e0c <UART_SetConfig+0x14c>
 8005db0:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0xf8>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005ded 	.word	0x08005ded
 8005dbc:	08005e0d 	.word	0x08005e0d
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005e0d 	.word	0x08005e0d
 8005dc8:	08005dfd 	.word	0x08005dfd
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e0d 	.word	0x08005e0d
 8005dd4:	08005e0d 	.word	0x08005e0d
 8005dd8:	08005df5 	.word	0x08005df5
 8005ddc:	08005e0d 	.word	0x08005e0d
 8005de0:	08005e0d 	.word	0x08005e0d
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	2300      	movs	r3, #0
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df2:	e0d8      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005df4:	2302      	movs	r3, #2
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfa:	e0d4      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e02:	e0d0      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e0a:	e0cc      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e12:	e0c8      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5e      	ldr	r2, [pc, #376]	; (8005f94 <UART_SetConfig+0x2d4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d125      	bne.n	8005e6a <UART_SetConfig+0x1aa>
 8005e1e:	4b5b      	ldr	r3, [pc, #364]	; (8005f8c <UART_SetConfig+0x2cc>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d016      	beq.n	8005e5a <UART_SetConfig+0x19a>
 8005e2c:	2b30      	cmp	r3, #48	; 0x30
 8005e2e:	d818      	bhi.n	8005e62 <UART_SetConfig+0x1a2>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d00a      	beq.n	8005e4a <UART_SetConfig+0x18a>
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d814      	bhi.n	8005e62 <UART_SetConfig+0x1a2>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <UART_SetConfig+0x182>
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d008      	beq.n	8005e52 <UART_SetConfig+0x192>
 8005e40:	e00f      	b.n	8005e62 <UART_SetConfig+0x1a2>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e48:	e0ad      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e50:	e0a9      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e52:	2304      	movs	r3, #4
 8005e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e58:	e0a5      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e60:	e0a1      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e62:	2310      	movs	r3, #16
 8005e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e68:	e09d      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <UART_SetConfig+0x2d8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d125      	bne.n	8005ec0 <UART_SetConfig+0x200>
 8005e74:	4b45      	ldr	r3, [pc, #276]	; (8005f8c <UART_SetConfig+0x2cc>)
 8005e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e80:	d016      	beq.n	8005eb0 <UART_SetConfig+0x1f0>
 8005e82:	2bc0      	cmp	r3, #192	; 0xc0
 8005e84:	d818      	bhi.n	8005eb8 <UART_SetConfig+0x1f8>
 8005e86:	2b80      	cmp	r3, #128	; 0x80
 8005e88:	d00a      	beq.n	8005ea0 <UART_SetConfig+0x1e0>
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d814      	bhi.n	8005eb8 <UART_SetConfig+0x1f8>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <UART_SetConfig+0x1d8>
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d008      	beq.n	8005ea8 <UART_SetConfig+0x1e8>
 8005e96:	e00f      	b.n	8005eb8 <UART_SetConfig+0x1f8>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9e:	e082      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea6:	e07e      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eae:	e07a      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb6:	e076      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ebe:	e072      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a35      	ldr	r2, [pc, #212]	; (8005f9c <UART_SetConfig+0x2dc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d12a      	bne.n	8005f20 <UART_SetConfig+0x260>
 8005eca:	4b30      	ldr	r3, [pc, #192]	; (8005f8c <UART_SetConfig+0x2cc>)
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ed8:	d01a      	beq.n	8005f10 <UART_SetConfig+0x250>
 8005eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ede:	d81b      	bhi.n	8005f18 <UART_SetConfig+0x258>
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ee4:	d00c      	beq.n	8005f00 <UART_SetConfig+0x240>
 8005ee6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eea:	d815      	bhi.n	8005f18 <UART_SetConfig+0x258>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <UART_SetConfig+0x238>
 8005ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef4:	d008      	beq.n	8005f08 <UART_SetConfig+0x248>
 8005ef6:	e00f      	b.n	8005f18 <UART_SetConfig+0x258>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efe:	e052      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f06:	e04e      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0e:	e04a      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f16:	e046      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1e:	e042      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <UART_SetConfig+0x2c4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d13a      	bne.n	8005fa0 <UART_SetConfig+0x2e0>
 8005f2a:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <UART_SetConfig+0x2cc>)
 8005f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f38:	d01a      	beq.n	8005f70 <UART_SetConfig+0x2b0>
 8005f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f3e:	d81b      	bhi.n	8005f78 <UART_SetConfig+0x2b8>
 8005f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f44:	d00c      	beq.n	8005f60 <UART_SetConfig+0x2a0>
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d815      	bhi.n	8005f78 <UART_SetConfig+0x2b8>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <UART_SetConfig+0x298>
 8005f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f54:	d008      	beq.n	8005f68 <UART_SetConfig+0x2a8>
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x2b8>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5e:	e022      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f60:	2302      	movs	r3, #2
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f66:	e01e      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f68:	2304      	movs	r3, #4
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6e:	e01a      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f70:	2308      	movs	r3, #8
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f76:	e016      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e012      	b.n	8005fa6 <UART_SetConfig+0x2e6>
 8005f80:	efff69f3 	.word	0xefff69f3
 8005f84:	40008000 	.word	0x40008000
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40004400 	.word	0x40004400
 8005f94:	40004800 	.word	0x40004800
 8005f98:	40004c00 	.word	0x40004c00
 8005f9c:	40005000 	.word	0x40005000
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a9f      	ldr	r2, [pc, #636]	; (8006228 <UART_SetConfig+0x568>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d17a      	bne.n	80060a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fb4:	2b08      	cmp	r3, #8
 8005fb6:	d824      	bhi.n	8006002 <UART_SetConfig+0x342>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x300>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08006003 	.word	0x08006003
 8005fc8:	08005fed 	.word	0x08005fed
 8005fcc:	08006003 	.word	0x08006003
 8005fd0:	08005ff3 	.word	0x08005ff3
 8005fd4:	08006003 	.word	0x08006003
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006003 	.word	0x08006003
 8005fe0:	08005ffb 	.word	0x08005ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe f804 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	61f8      	str	r0, [r7, #28]
        break;
 8005fea:	e010      	b.n	800600e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fec:	4b8f      	ldr	r3, [pc, #572]	; (800622c <UART_SetConfig+0x56c>)
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e00d      	b.n	800600e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ff2:	f7fd ff65 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 8005ff6:	61f8      	str	r0, [r7, #28]
        break;
 8005ff8:	e009      	b.n	800600e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffe:	61fb      	str	r3, [r7, #28]
        break;
 8006000:	e005      	b.n	800600e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800600c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 80fb 	beq.w	800620c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	429a      	cmp	r2, r3
 8006024:	d305      	bcc.n	8006032 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	429a      	cmp	r2, r3
 8006030:	d903      	bls.n	800603a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006038:	e0e8      	b.n	800620c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2200      	movs	r2, #0
 800603e:	461c      	mov	r4, r3
 8006040:	4615      	mov	r5, r2
 8006042:	f04f 0200 	mov.w	r2, #0
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	022b      	lsls	r3, r5, #8
 800604c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006050:	0222      	lsls	r2, r4, #8
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	6849      	ldr	r1, [r1, #4]
 8006056:	0849      	lsrs	r1, r1, #1
 8006058:	2000      	movs	r0, #0
 800605a:	4688      	mov	r8, r1
 800605c:	4681      	mov	r9, r0
 800605e:	eb12 0a08 	adds.w	sl, r2, r8
 8006062:	eb43 0b09 	adc.w	fp, r3, r9
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	603b      	str	r3, [r7, #0]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006074:	4650      	mov	r0, sl
 8006076:	4659      	mov	r1, fp
 8006078:	f7fa f8a6 	bl	80001c8 <__aeabi_uldivmod>
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	4613      	mov	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608a:	d308      	bcc.n	800609e <UART_SetConfig+0x3de>
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006092:	d204      	bcs.n	800609e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	e0b6      	b.n	800620c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060a4:	e0b2      	b.n	800620c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ae:	d15e      	bne.n	800616e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80060b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d828      	bhi.n	800610a <UART_SetConfig+0x44a>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x400>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	080060ed 	.word	0x080060ed
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	0800610b 	.word	0x0800610b
 80060d0:	080060fb 	.word	0x080060fb
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	0800610b 	.word	0x0800610b
 80060dc:	0800610b 	.word	0x0800610b
 80060e0:	08006103 	.word	0x08006103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fd ff84 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 80060e8:	61f8      	str	r0, [r7, #28]
        break;
 80060ea:	e014      	b.n	8006116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060ec:	f7fd ff96 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 80060f0:	61f8      	str	r0, [r7, #28]
        break;
 80060f2:	e010      	b.n	8006116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f4:	4b4d      	ldr	r3, [pc, #308]	; (800622c <UART_SetConfig+0x56c>)
 80060f6:	61fb      	str	r3, [r7, #28]
        break;
 80060f8:	e00d      	b.n	8006116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fa:	f7fd fee1 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 80060fe:	61f8      	str	r0, [r7, #28]
        break;
 8006100:	e009      	b.n	8006116 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006106:	61fb      	str	r3, [r7, #28]
        break;
 8006108:	e005      	b.n	8006116 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006114:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d077      	beq.n	800620c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	005a      	lsls	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	441a      	add	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006130:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b0f      	cmp	r3, #15
 8006136:	d916      	bls.n	8006166 <UART_SetConfig+0x4a6>
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613e:	d212      	bcs.n	8006166 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	b29b      	uxth	r3, r3
 8006144:	f023 030f 	bic.w	r3, r3, #15
 8006148:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	b29b      	uxth	r3, r3
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	b29a      	uxth	r2, r3
 8006156:	8afb      	ldrh	r3, [r7, #22]
 8006158:	4313      	orrs	r3, r2
 800615a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	8afa      	ldrh	r2, [r7, #22]
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	e052      	b.n	800620c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800616c:	e04e      	b.n	800620c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800616e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006172:	2b08      	cmp	r3, #8
 8006174:	d827      	bhi.n	80061c6 <UART_SetConfig+0x506>
 8006176:	a201      	add	r2, pc, #4	; (adr r2, 800617c <UART_SetConfig+0x4bc>)
 8006178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617c:	080061a1 	.word	0x080061a1
 8006180:	080061a9 	.word	0x080061a9
 8006184:	080061b1 	.word	0x080061b1
 8006188:	080061c7 	.word	0x080061c7
 800618c:	080061b7 	.word	0x080061b7
 8006190:	080061c7 	.word	0x080061c7
 8006194:	080061c7 	.word	0x080061c7
 8006198:	080061c7 	.word	0x080061c7
 800619c:	080061bf 	.word	0x080061bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fd ff26 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 80061a4:	61f8      	str	r0, [r7, #28]
        break;
 80061a6:	e014      	b.n	80061d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a8:	f7fd ff38 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 80061ac:	61f8      	str	r0, [r7, #28]
        break;
 80061ae:	e010      	b.n	80061d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b0:	4b1e      	ldr	r3, [pc, #120]	; (800622c <UART_SetConfig+0x56c>)
 80061b2:	61fb      	str	r3, [r7, #28]
        break;
 80061b4:	e00d      	b.n	80061d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061b6:	f7fd fe83 	bl	8003ec0 <HAL_RCC_GetSysClockFreq>
 80061ba:	61f8      	str	r0, [r7, #28]
        break;
 80061bc:	e009      	b.n	80061d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c2:	61fb      	str	r3, [r7, #28]
        break;
 80061c4:	e005      	b.n	80061d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061d0:	bf00      	nop
    }

    if (pclk != 0U)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d019      	beq.n	800620c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	085a      	lsrs	r2, r3, #1
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	441a      	add	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b0f      	cmp	r3, #15
 80061f0:	d909      	bls.n	8006206 <UART_SetConfig+0x546>
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f8:	d205      	bcs.n	8006206 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60da      	str	r2, [r3, #12]
 8006204:	e002      	b.n	800620c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006218:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800621c:	4618      	mov	r0, r3
 800621e:	3728      	adds	r7, #40	; 0x28
 8006220:	46bd      	mov	sp, r7
 8006222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006226:	bf00      	nop
 8006228:	40008000 	.word	0x40008000
 800622c:	00f42400 	.word	0x00f42400

08006230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	f003 0308 	and.w	r3, r3, #8
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01a      	beq.n	8006346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632e:	d10a      	bne.n	8006346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	605a      	str	r2, [r3, #4]
  }
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af02      	add	r7, sp, #8
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006384:	f7fa fdfc 	bl	8000f80 <HAL_GetTick>
 8006388:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b08      	cmp	r3, #8
 8006396:	d10e      	bne.n	80063b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f82d 	bl	8006406 <UART_WaitOnFlagUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e023      	b.n	80063fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d10e      	bne.n	80063e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f817 	bl	8006406 <UART_WaitOnFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e00d      	b.n	80063fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b09c      	sub	sp, #112	; 0x70
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	4613      	mov	r3, r2
 8006414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006416:	e0a5      	b.n	8006564 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641e:	f000 80a1 	beq.w	8006564 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fa fdad 	bl	8000f80 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <UART_WaitOnFlagUntilTimeout+0x32>
 8006432:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006434:	2b00      	cmp	r3, #0
 8006436:	d13e      	bne.n	80064b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800644c:	667b      	str	r3, [r7, #100]	; 0x64
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006456:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006458:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800645c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e6      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3308      	adds	r3, #8
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647c:	f023 0301 	bic.w	r3, r3, #1
 8006480:	663b      	str	r3, [r7, #96]	; 0x60
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3308      	adds	r3, #8
 8006488:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800648a:	64ba      	str	r2, [r7, #72]	; 0x48
 800648c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e067      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d04f      	beq.n	8006564 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d2:	d147      	bne.n	8006564 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34
 80064fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e6      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3308      	adds	r3, #8
 8006516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	613b      	str	r3, [r7, #16]
   return(result);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	66bb      	str	r3, [r7, #104]	; 0x68
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006530:	623a      	str	r2, [r7, #32]
 8006532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	69f9      	ldr	r1, [r7, #28]
 8006536:	6a3a      	ldr	r2, [r7, #32]
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	61bb      	str	r3, [r7, #24]
   return(result);
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e5      	bne.n	8006510 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2220      	movs	r2, #32
 800654e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e010      	b.n	8006586 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69da      	ldr	r2, [r3, #28]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	429a      	cmp	r2, r3
 8006580:	f43f af4a 	beq.w	8006418 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3770      	adds	r7, #112	; 0x70
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <__libc_init_array>:
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	4d0d      	ldr	r5, [pc, #52]	; (80065c8 <__libc_init_array+0x38>)
 8006594:	4c0d      	ldr	r4, [pc, #52]	; (80065cc <__libc_init_array+0x3c>)
 8006596:	1b64      	subs	r4, r4, r5
 8006598:	10a4      	asrs	r4, r4, #2
 800659a:	2600      	movs	r6, #0
 800659c:	42a6      	cmp	r6, r4
 800659e:	d109      	bne.n	80065b4 <__libc_init_array+0x24>
 80065a0:	4d0b      	ldr	r5, [pc, #44]	; (80065d0 <__libc_init_array+0x40>)
 80065a2:	4c0c      	ldr	r4, [pc, #48]	; (80065d4 <__libc_init_array+0x44>)
 80065a4:	f000 f820 	bl	80065e8 <_init>
 80065a8:	1b64      	subs	r4, r4, r5
 80065aa:	10a4      	asrs	r4, r4, #2
 80065ac:	2600      	movs	r6, #0
 80065ae:	42a6      	cmp	r6, r4
 80065b0:	d105      	bne.n	80065be <__libc_init_array+0x2e>
 80065b2:	bd70      	pop	{r4, r5, r6, pc}
 80065b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b8:	4798      	blx	r3
 80065ba:	3601      	adds	r6, #1
 80065bc:	e7ee      	b.n	800659c <__libc_init_array+0xc>
 80065be:	f855 3b04 	ldr.w	r3, [r5], #4
 80065c2:	4798      	blx	r3
 80065c4:	3601      	adds	r6, #1
 80065c6:	e7f2      	b.n	80065ae <__libc_init_array+0x1e>
 80065c8:	08006650 	.word	0x08006650
 80065cc:	08006650 	.word	0x08006650
 80065d0:	08006650 	.word	0x08006650
 80065d4:	08006654 	.word	0x08006654

080065d8 <memset>:
 80065d8:	4402      	add	r2, r0
 80065da:	4603      	mov	r3, r0
 80065dc:	4293      	cmp	r3, r2
 80065de:	d100      	bne.n	80065e2 <memset+0xa>
 80065e0:	4770      	bx	lr
 80065e2:	f803 1b01 	strb.w	r1, [r3], #1
 80065e6:	e7f9      	b.n	80065dc <memset+0x4>

080065e8 <_init>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	bf00      	nop
 80065ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ee:	bc08      	pop	{r3}
 80065f0:	469e      	mov	lr, r3
 80065f2:	4770      	bx	lr

080065f4 <_fini>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr
